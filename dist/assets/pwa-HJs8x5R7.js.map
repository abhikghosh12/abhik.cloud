{"version":3,"file":"pwa-HJs8x5R7.js","sources":["../../src/utils/pwa.ts"],"sourcesContent":["/**\n * Progressive Web App (PWA) utilities\n * Handles service worker registration and PWA features\n */\n\nlet swRegistration: ServiceWorkerRegistration | null = null\n\n/**\n * Register service worker for PWA functionality\n */\nexport async function registerSW(): Promise<ServiceWorkerRegistration | null> {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.register('/sw.js')\n      console.log('SW registered: ', registration)\n      swRegistration = registration\n\n      // Check for updates\n      registration.addEventListener('updatefound', () => {\n        const newWorker = registration.installing\n        if (newWorker) {\n          newWorker.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              // New update available\n              showUpdateNotification()\n            }\n          })\n        }\n      })\n\n      return registration\n    } catch (error) {\n      console.log('SW registration failed: ', error)\n      return null\n    }\n  }\n  return null\n}\n\n/**\n * Unregister service worker\n */\nexport async function unregisterSW(): Promise<boolean> {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.ready\n      await registration.unregister()\n      console.log('SW unregistered')\n      return true\n    } catch (error) {\n      console.log('SW unregistration failed: ', error)\n      return false\n    }\n  }\n  return false\n}\n\n/**\n * Update service worker\n */\nexport async function updateSW(): Promise<void> {\n  if (swRegistration) {\n    try {\n      await swRegistration.update()\n      window.location.reload()\n    } catch (error) {\n      console.log('SW update failed: ', error)\n    }\n  }\n}\n\n/**\n * Show update notification to user\n */\nfunction showUpdateNotification(): void {\n  // Create update notification\n  const notification = document.createElement('div')\n  notification.className = `\n    fixed bottom-4 right-4 bg-primary-600 text-white p-4 rounded-lg shadow-lg \n    flex items-center space-x-3 z-50 max-w-sm\n  `\n  notification.innerHTML = `\n    <div class=\"flex-1\">\n      <p class=\"font-medium\">New version available!</p>\n      <p class=\"text-sm opacity-90\">Update to get the latest features.</p>\n    </div>\n    <button id=\"update-btn\" class=\"bg-white text-primary-600 px-3 py-1 rounded text-sm font-medium\">\n      Update\n    </button>\n    <button id=\"dismiss-btn\" class=\"text-white/80 hover:text-white\">\n      Ã—\n    </button>\n  `\n\n  document.body.appendChild(notification)\n\n  // Handle update button click\n  const updateBtn = notification.querySelector('#update-btn')\n  updateBtn?.addEventListener('click', () => {\n    updateSW()\n    document.body.removeChild(notification)\n  })\n\n  // Handle dismiss button click\n  const dismissBtn = notification.querySelector('#dismiss-btn')\n  dismissBtn?.addEventListener('click', () => {\n    document.body.removeChild(notification)\n  })\n\n  // Auto remove after 10 seconds\n  setTimeout(() => {\n    if (document.body.contains(notification)) {\n      document.body.removeChild(notification)\n    }\n  }, 10000)\n}\n\n/**\n * Check if app can be installed (PWA)\n */\nexport function canInstallPWA(): boolean {\n  return 'beforeinstallprompt' in window\n}\n\n/**\n * Show PWA install prompt\n */\nlet deferredPrompt: any = null\n\n// Listen for beforeinstallprompt event\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  e.preventDefault()\n  deferredPrompt = e\n  showInstallButton()\n})\n\nfunction showInstallButton(): void {\n  const installBtn = document.createElement('button')\n  installBtn.className = `\n    fixed bottom-4 left-4 bg-secondary-600 text-white p-3 rounded-full shadow-lg\n    hover:bg-secondary-700 transition-colors z-50 flex items-center space-x-2\n  `\n  installBtn.innerHTML = `\n    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \n            d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4-4m0 0L8 8m4-4v12\">\n      </path>\n    </svg>\n    <span class=\"text-sm font-medium\">Install App</span>\n  `\n\n  installBtn.addEventListener('click', async () => {\n    if (deferredPrompt) {\n      deferredPrompt.prompt()\n      const { outcome } = await deferredPrompt.userChoice\n      console.log(`User response to the install prompt: ${outcome}`)\n      deferredPrompt = null\n      document.body.removeChild(installBtn)\n    }\n  })\n\n  document.body.appendChild(installBtn)\n\n  // Auto hide after 15 seconds\n  setTimeout(() => {\n    if (document.body.contains(installBtn)) {\n      document.body.removeChild(installBtn)\n    }\n  }, 15000)\n}\n\n/**\n * Check if app is running as PWA\n */\nexport function isPWA(): boolean {\n  return window.matchMedia('(display-mode: standalone)').matches ||\n         (window.navigator as any).standalone === true\n}\n\n/**\n * Get PWA display mode\n */\nexport function getPWADisplayMode(): string {\n  if (isPWA()) {\n    return 'standalone'\n  }\n  if (window.matchMedia('(display-mode: minimal-ui)').matches) {\n    return 'minimal-ui'\n  }\n  if (window.matchMedia('(display-mode: fullscreen)').matches) {\n    return 'fullscreen'\n  }\n  return 'browser'\n}\n\n/**\n * Check if device supports PWA features\n */\nexport function supportsPWA(): boolean {\n  return 'serviceWorker' in navigator && \n         'PushManager' in window && \n         'Notification' in window\n}\n"],"names":["swRegistration","async","registerSW","navigator","registration","serviceWorker","register","addEventListener","newWorker","installing","state","controller","notification","document","createElement","className","innerHTML","body","appendChild","updateBtn","querySelector","updateSW","removeChild","dismissBtn","setTimeout","contains","showUpdateNotification","error","update","window","location","reload","deferredPrompt","e","preventDefault","installBtn","prompt","outcome","userChoice","showInstallButton"],"mappings":"AAKA,IAAIA,EAAmD,KAKvDC,eAAsBC,IACpB,GAAI,kBAAmBC,UACrB,IACE,MAAMC,QAAqBD,UAAUE,cAAcC,SAAS,UAiB5D,OAfAN,EAAiBI,EAGjBA,EAAaG,iBAAiB,cAAe,KAC3C,MAAMC,EAAYJ,EAAaK,WAC3BD,GACFA,EAAUD,iBAAiB,cAAe,KAChB,cAApBC,EAAUE,OAAyBP,UAAUE,cAAcM,YAoD3E,WAEE,MAAMC,EAAeC,SAASC,cAAc,OAC5CF,EAAaG,UAAY,sIAIzBH,EAAaI,UAAY,mZAazBH,SAASI,KAAKC,YAAYN,GAG1B,MAAMO,EAAYP,EAAaQ,cAAc,eAC7C,MAAAD,GAAAA,EAAWZ,iBAAiB,QAAS,KACnCc,IACAR,SAASI,KAAKK,YAAYV,KAI5B,MAAMW,EAAaX,EAAaQ,cAAc,gBAC9C,MAAAG,GAAAA,EAAYhB,iBAAiB,QAAS,KACpCM,SAASI,KAAKK,YAAYV,KAI5BY,WAAW,KACLX,SAASI,KAAKQ,SAASb,IACzBC,SAASI,KAAKK,YAAYV,IAE3B,IACL,CA3Fcc,OAMDtB,CACT,OAASuB,GAEP,OAAO,IACT,CAEF,OAAO,IACT,CAuBA1B,eAAsBoB,IACpB,GAAIrB,EACF,UACQA,EAAe4B,SACrBC,OAAOC,SAASC,QAClB,OAASJ,GAET,CAEJ,CA0DA,IAAIK,EAAsB,KAG1BH,OAAOtB,iBAAiB,sBAAwB0B,IAC9CA,EAAEC,iBACFF,EAAiBC,EAInB,WACE,MAAME,EAAatB,SAASC,cAAc,UAC1CqB,EAAWpB,UAAY,wKAIvBoB,EAAWnB,UAAY,4UASvBmB,EAAW5B,iBAAiB,QAASN,UACnC,GAAI+B,EAAgB,CAClBA,EAAeI,SACf,MAAMC,QAAEA,SAAkBL,EAAeM,WAEzCN,EAAiB,KACjBnB,SAASI,KAAKK,YAAYa,EAC5B,IAGFtB,SAASI,KAAKC,YAAYiB,GAG1BX,WAAW,KACLX,SAASI,KAAKQ,SAASU,IACzBtB,SAASI,KAAKK,YAAYa,IAE3B,KACL,CApCEI"}