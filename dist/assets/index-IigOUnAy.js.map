{"version":3,"mappings":"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","names":["Action","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","PopStateEventType","createBrowserHistory","options","getLocation","createHref","validateLocation","window","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","index","getIndex","replaceState","state","idx","handlePop","nextIndex","delta","location","push","to","Push","createLocation","historyState","getHistoryState","url","pushState","error","DOMException","name","replace","Replace","createURL","base","origin","href","createPath","invariant","URL","listen","fn","Error","addEventListener","removeEventListener","encodeLocation","pathname","search","hash","go","n","getUrlBasedHistory","usr","value","message","warning","cond","e","current","parsePath","Math","random","toString","substr","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","ResultType","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","slice","every","compareIndexes","routesMeta","map","meta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","matchRoutesImpl","parentsMeta","parentPath","flattenRoute","route","relativePath","caseSensitive","startsWith","joinPaths","concat","children","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","join","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","allowPartial","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","v","decodeURIComponent","toLowerCase","startIndex","nextChar","paths","validMutationMethodsArr","Set","validRequestMethodsArr","DataRouterContext","React.createContext","DataRouterStateContext","NavigationContext","LocationContext","RouteContext","outlet","isDataRoute","RouteErrorContext","useInRouterContext","React.useContext","useRoutes","dataRouterState","future","UNSAFE_invariant","navigator","parentMatches","routeMatch","parentParams","parentPathnameBase","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","parentSegments","renderedMatches","_dataRouterState","_future","errors","v7_partialHydration","initialized","errorIndex","findIndex","m","id","min","renderFallback","fallbackIndex","HydrateFallback","hydrateFallbackElement","loaderData","needsToRunLoader","loader","lazy","reduceRight","shouldRenderHydrateFallback","errorElement","defaultErrorElement","alreadyWarned$1","getChildren","Component","React.createElement","element","RenderedRoute","routeContext","ErrorBoundary","RenderErrorBoundary","revalidation","component","_renderMatches","Provider","navigationType","useRoutesImpl","DefaultErrorComponent","_state$errors","useDataRouterState","DataRouterStateHook","UseRouteError","routeId","useRouteContext","thisRoute","useCurrentRouteId","useRouteError","status","statusText","internal","isRouteErrorResponse","JSON","stringify","stack","preStyles","padding","backgroundColor","React.Fragment","style","fontStyle","React.Component","constructor","props","super","getDerivedStateFromError","getDerivedStateFromProps","componentDidCatch","errorInfo","render","dataRouterContext","static","staticContext","_deepestRenderedBoundaryId","Route","_props","Router","_ref5","basenameProp","locationProp","staticProp","navigationContext","React.useMemo","v7_relativeSplatPath","locationContext","trailingPathname","Routes","_ref6","createRoutesFromChildren","React.Children","React.isValidElement","treePath","type","hasErrorBoundary","shouldRevalidate","handle","Promise","__reactRouterVersion","startTransitionImpl","React","BrowserRouter","_ref4","historyRef","React.useRef","setStateImpl","React.useState","v7_startTransition","setState","React.useCallback","newState","React.useLayoutEffect","React.useEffect","UNSAFE_logV6DeprecationWarnings","renderFuture","DataRouterHook","Subscribable","listeners","subscribe","add","onSubscribe","delete","onUnsubscribe","hasListeners","size","defaultTimeoutProvider","setTimeout","callback","delay","clearTimeout","timeoutId","setInterval","clearInterval","intervalId","timeoutManager","_a","__privateAdd","_provider","_providerCalled","setTimeoutProvider","provider","__privateSet","__privateGet","WeakMap","isServer","globalThis","noop","resolveStaleTime","staleTime","query","matchQuery","filters","exact","fetchStatus","predicate","queryKey","stale","queryHash","hashQueryKeyByOptions","partialMatchKey","isActive","isStale","matchMutation","mutation","mutationKey","hashKey","queryKeyHashFn","val","isPlainObject","keys","hasOwn","replaceEqualDeep","array","isPlainArray","aSize","bItems","bSize","copy","Array","equalItems","aItem","bItem","isArray","o","hasObjectPrototype","ctor","prot","getPrototypeOf","replaceData","prevData","data","structuralSharing","addToEnd","items","item","max","newItems","addToStart","skipToken","Symbol","ensureQueryFn","fetchOptions","queryFn","initialPromise","reject","focusManager","_b","_focused","_cleanup","_setup","onFocus","setEventListener","setup","focused","setFocused","isFocused","visibilityState","defaultScheduler","notifyManager","queue","transactions","notifyFn","batchNotifyFn","scheduleFn","schedule","batch","originalQueue","flush","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","setScheduler","createNotifyManager","onlineManager","_c","_online","onOnline","onlineListener","offlineListener","setOnline","online","isOnline","defaultRetryDelay","failureCount","canFetch","networkMode","CancelledError","revert","silent","createRetryer","config","continueFn","isRetryCancelled","thenable","resolve","_resolve","_reject","finalize","catch","reason","pendingThenable","isResolved","canContinue","canRun","canStart","pause","continueResolve","onPause","then","onContinue","run","promiseOrValue","retry","retryDelay","shouldRetry","timeout","onFail","promise","cancel","cancelOptions","onCancel","continue","cancelRetry","continueRetry","start","Removable","_d","_gcTimeout","destroy","clearGcTimeout","scheduleGc","gcTime","Infinity","optionalRemove","updateGcTime","newGcTime","Query","_e","_Query_instances","_initialState","_revertState","_cache","_client","_retryer","_defaultOptions","_abortSignalConsumed","defaultOptions","setOptions","observers","client","getQueryCache","getDefaultState","defaultState","setData","updatedAt","dataUpdatedAt","manual","remove","newData","__privateMethod","setStateOptions","reset","observer","resolveEnabled","enabled","isDisabled","getObserversCount","dataUpdateCount","errorUpdateCount","isStatic","getCurrentResult","isInvalidated","isStaleByTime","Date","now","timeUntilStale","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","dispatch_fn","fetch","abortController","AbortController","addSignalProperty","object","defineProperty","enumerable","get","signal","fetchFn","queryFnContext","queryFnContext2","createQueryFnContext","persister","context","context2","createFetchContext","behavior","onFetch","fetchMeta","abort","_f","onSuccess","_h","_g","onSettled","_j","_i","onError","_l","_k","WeakSet","fetchFailureCount","fetchFailureReason","errorUpdatedAt","reducer","onQueryUpdate","initialData","hasData","initialDataUpdatedAt","infiniteQueryBehavior","pages","direction","fetchMore","oldPages","oldPageParams","pageParams","currentPage","async","cancelled","fetchPage","param","previous","pageParam","aborted","page","maxPages","addTo","oldData","getPreviousPageParam","getNextPageParam","remainingPages","initialPageParam","lastIndex","Mutation","_Mutation_instances","_observers","_mutationCache","mutationId","mutationCache","failureReason","isPaused","variables","submittedAt","execute","mutationFn","restored","onMutate","_n","_m","_p","_o","_r","_q","_t","_s","runNext","onMutationUpdate","MutationCache","_mutations","_scopes","_mutationId","Map","build","__privateWrapper","defaultMutationOptions","scope","scopeFor","scopedMutations","set","splice","mutationsWithSameScope","firstPendingMutation","foundMutation","clear","getAll","from","defaultedFilters","findAll","event","resumePausedMutations","pausedMutations","all","QueryCache","_queries","defaultQueryOptions","getQueryDefaults","has","queryInMap","values","queries","QueryClient","_queryCache","_queryDefaults","_mutationDefaults","_mountCount","_unsubscribeFocus","_unsubscribeOnline","queryCache","mount","unmount","isFetching","isMutating","getQueryData","ensureQueryData","defaultedOptions","cachedData","fetchQuery","revalidateIfStale","prefetchQuery","getQueriesData","setQueryData","updater","input","functionalUpdate","setQueriesData","getQueryState","removeQueries","resetQueries","refetchQueries","cancelQueries","defaultedCancelOptions","promises","invalidateQueries","refetchType","throwOnError","fetchInfiniteQuery","prefetchInfiniteQuery","ensureInfiniteQueryData","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","defaults","queryDefault","setMutationDefaults","getMutationDefaults","_defaulted","refetchOnReconnect","suspense","mutations","QueryClientContext","QueryClientProvider","jsx","hasElementType","Element","hasMap","hasSet","hasArrayBuffer","ArrayBuffer","isView","equal","it","entries","next","done","flags","valueOf","$$typeof","condition","format","c","d","f","argIndex","framesToPop","objA","objB","compare","compareContext","ret","keysA","keysB","bHasOwnProperty","valueA","valueB","t","r","create","setPrototypeOf","__proto__","u","l","BASE","BODY","HEAD","HTML","LINK","META","NOSCRIPT","SCRIPT","STYLE","TITLE","FRAGMENT","p","rel","charset","property","h","accesskey","class","contenteditable","contextmenu","itemprop","tabindex","y","T","g","A","reverse","C","console","warn","O","S","E","priority","default","I","P","w","String","L","j","dangerouslySetInnerHTML","__html","innerHTML","cssText","createElement","M","toComponent","titleAttributes","title","k","baseTag","bodyAttributes","encode","htmlAttributes","noscriptTags","styleTags","linkTags","metaTags","scriptTags","prioritizeSeoTags","priorityMethods","link","noscript","script","H","N","instances","setHelmet","helmet","helmetInstances","canUseDOM","R","createContext","D","shape","func","U","q","helmetData","propTypes","node","isRequired","defaultProps","displayName","Y","head","querySelector","querySelectorAll","styleSheet","appendChild","createTextNode","setAttribute","isEqualNode","parentNode","removeChild","oldTags","newTags","B","getElementsByTagName","getAttribute","removeAttribute","K","onChangeClientState","z","rendered","shouldComponentUpdate","componentDidUpdate","emitChange","componentWillUnmount","defer","cancelAnimationFrame","requestAnimationFrame","init","F","G","W","mapNestedChildrenToProps","flattenArrayTypeChildren","child","arrayTypeChildren","newChildProps","nestedChildren","mapObjectTypeChildren","newProps","mapArrayTypeChildrenToProps","warnOnInvalidChildren","mapChildrenToProps","Children","Consumer","oneOfType","arrayOf","defaultTitle","string","bool","encodeSpecialCharacters","titleTemplate","defaultAttributes","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","createLucideIcon","iconName","iconNode","forwardRef","color","absoluteStrokeWidth","className","ref","Number","trim","tag","attrs","Briefcase","rx","ry","Code","points","Home","Mail","Menu","x1","x2","y1","y2","User","cx","cy","X","navItems","label","icon","Navbar","isScrolled","setIsScrolled","useState","isVisible","setIsVisible","lastScrollY","setLastScrollY","activeSection","setActiveSection","isMobileMenuOpen","setIsMobileMenuOpen","toggleMobileMenu","useEffect","handleScroll","currentScrollY","scrollY","currentItem","handleNavClick","getElementById","scrollIntoView","jsxs","Fragment","motion","nav","initial","animate","transition","duration","onClick","AnimatePresence","div","opacity","exit","bounce","button","whileHover","scale","whileTap","ItemIcon","HomePage","import","__VITE_PRELOAD__","CertificatesPage","App","Helmet","content","Suspense","fallback","queryClient","ReactDOM","createRoot","StrictMode","HelmetProvider"],"ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"sources":["../../node_modules/@remix-run/router/dist/router.js","../../node_modules/react-router/dist/index.js","../../node_modules/react-router-dom/dist/index.js","../../node_modules/@tanstack/query-core/build/modern/subscribable.js","../../node_modules/@tanstack/query-core/build/modern/timeoutManager.js","../../node_modules/@tanstack/query-core/build/modern/utils.js","../../node_modules/@tanstack/query-core/build/modern/focusManager.js","../../node_modules/@tanstack/query-core/build/modern/notifyManager.js","../../node_modules/@tanstack/query-core/build/modern/onlineManager.js","../../node_modules/@tanstack/query-core/build/modern/retryer.js","../../node_modules/@tanstack/query-core/build/modern/thenable.js","../../node_modules/@tanstack/query-core/build/modern/removable.js","../../node_modules/@tanstack/query-core/build/modern/query.js","../../node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js","../../node_modules/@tanstack/query-core/build/modern/mutation.js","../../node_modules/@tanstack/query-core/build/modern/mutationCache.js","../../node_modules/@tanstack/query-core/build/modern/queryCache.js","../../node_modules/@tanstack/query-core/build/modern/queryClient.js","../../node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js","../../node_modules/react-fast-compare/index.js","../../node_modules/invariant/browser.js","../../node_modules/shallowequal/index.js","../../node_modules/react-helmet-async/lib/index.module.js","../../node_modules/lucide-react/dist/esm/defaultAttributes.js","../../node_modules/lucide-react/dist/esm/createLucideIcon.js","../../node_modules/lucide-react/dist/esm/icons/briefcase.js","../../node_modules/lucide-react/dist/esm/icons/code.js","../../node_modules/lucide-react/dist/esm/icons/home.js","../../node_modules/lucide-react/dist/esm/icons/mail.js","../../node_modules/lucide-react/dist/esm/icons/menu.js","../../node_modules/lucide-react/dist/esm/icons/user.js","../../node_modules/lucide-react/dist/esm/icons/x.js","../../src/components/layout/Navbar.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @remix-run/router v1.23.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialMatchesIsFOW = false;\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatchesIsFOW = true;\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate = undefined;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Remove any lingering deleted fetchers that have already been removed\n    // from state.fetchers\n    deletedFetchers.forEach(key => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        deletedFetchersKeys.push(key);\n      }\n    });\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    } else {\n      // We already called deleteFetcher() on these, can remove them from this\n      // Set now that we've handed the keys off to the data layer\n      deletedFetchersKeys.forEach(key => deletedFetchers.delete(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = opts != null && opts.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ?\n    // `matchRoutes()` has already been called if we're in here via `router.initialize()`\n    state.matches : matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches;\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id];\n        // Fetcher results are keyed by fetcher key from here on out, not routeId\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    // If this fetcher was previously marked for deletion, unmark it since we\n    // have a new instance\n    if (deletedFetchers.has(key)) {\n      deletedFetchers.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    // If we opted into the flag we can clear this now since we're calling\n    // deleteFetcher() at the end of updateState() and we've already handed the\n    // deleted fetcher keys off to the data layer.\n    // If not, we're eagerly calling deleteFetcher() and we need to keep this\n    // Set populated until the next updateState call, and we'll clear\n    // `deletedFetchers` then\n    if (future.v7_fetcherPersist) {\n      deletedFetchers.delete(key);\n    }\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      deletedFetchers.add(key);\n      if (!future.v7_fetcherPersist) {\n        deleteFetcher(key);\n      }\n    } else {\n      activeFetchers.set(key, count);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal, fetcherKey) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          signal,\n          path: pathname,\n          matches: partialMatches,\n          fetcherKey,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // Avoid loops if the second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n      let result = results[match.route.id];\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  });\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n  return results;\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init3, _result$init4;\n      if (result.data instanceof Error) {\n        var _result$init, _result$init2;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n          headers: (_result$init2 = result.init) != null && _result$init2.headers ? new Headers(result.init.headers) : undefined\n        };\n      }\n      // Convert thrown data() to ErrorResponse instances\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(((_result$init3 = result.init) == null ? void 0 : _result$init3.status) || 500, undefined, result.data),\n        statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n        headers: (_result$init4 = result.init) != null && _result$init4.headers ? new Headers(result.init.headers) : undefined\n      };\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: ((_result$init6 = result.init) == null ? void 0 : _result$init6.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init7, _result$init8;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init7 = result.init) == null ? void 0 : _result$init7.status,\n      headers: (_result$init8 = result.init) != null && _result$init8.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_decodePath, UNSAFE_getResolveToMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, UNSAFE_convertRouteMatchToUiMatch, stripBasename, IDLE_BLOCKER, isRouteErrorResponse, createMemoryHistory, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, replace, resolvePath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/v6/hooks/use-href\n */\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/v6/hooks/use-location\n */\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, UNSAFE_decodePath(pathname)), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigate\n */\nfunction useNavigate() {\n  let {\n    isDataRoute\n  } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let {\n    basename,\n    future,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we're not in a data router,\n    // otherwise it'll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/v6/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/v6/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/v6/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/v6/hooks/use-resolved-path\n */\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    future\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/v6/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can't guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don't 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           \"/descendant/a%25b/match\"\n    //   parentPathnameBase: \"/descendant/a%b\"\n    //\n    // And the direct substring removal approach won't work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined || matches[matches.length - 1].route.lazy !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState, future);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    return this.state.error !== undefined ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\n  var _dataRouterState;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (future === void 0) {\n    future = null;\n  }\n  if (matches == null) {\n    var _future;\n    if (!dataRouterState) {\n      return null;\n    }\n    if (dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {\n      // Don't bail if we're initializing with partial hydration and we have\n      // router matches.  That means we're actively running `patchRoutesOnNavigation`\n      // so we should render down the partial matches to the appropriate\n      // `HydrateFallback`.  We only do this if `parentMatches` is empty so it\n      // only impacts the root matches for `RouterProvider` and no descendant\n      // `<Routes>`\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== undefined);\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let {\n          loaderData,\n          errors\n        } = dataRouterState;\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\"route-fallback\", false, \"No `HydrateFallback` element provided to render during initial hydration\");\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== \"function\") {\n      return !!shouldBlock;\n    }\n    if (basename === \"/\") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we've got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: _extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: _extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, _extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned$1 = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned$1[key]) {\n    alreadyWarned$1[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n}\n\nconst alreadyWarned = {};\nfunction warnOnce(key, message) {\n  if (process.env.NODE_ENV !== \"production\" && !alreadyWarned[message]) {\n    alreadyWarned[message] = true;\n    console.warn(message);\n  }\n}\nconst logDeprecation = (flag, msg, link) => warnOnce(flag, \"\\u26A0\\uFE0F React Router Future Flag Warning: \" + msg + \". \" + (\"You can use the `\" + flag + \"` future flag to opt-in early. \") + (\"For more information, see \" + link + \".\"));\nfunction logV6DeprecationWarnings(renderFuture, routerFuture) {\n  if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === undefined) {\n    logDeprecation(\"v7_startTransition\", \"React Router will begin wrapping state updates in `React.startTransition` in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_starttransition\");\n  }\n  if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === undefined && (!routerFuture || routerFuture.v7_relativeSplatPath === undefined)) {\n    logDeprecation(\"v7_relativeSplatPath\", \"Relative route resolution within Splat routes is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath\");\n  }\n  if (routerFuture) {\n    if (routerFuture.v7_fetcherPersist === undefined) {\n      logDeprecation(\"v7_fetcherPersist\", \"The persistence behavior of fetchers is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist\");\n    }\n    if (routerFuture.v7_normalizeFormMethod === undefined) {\n      logDeprecation(\"v7_normalizeFormMethod\", \"Casing of `formMethod` fields is being normalized to uppercase in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod\");\n    }\n    if (routerFuture.v7_partialHydration === undefined) {\n      logDeprecation(\"v7_partialHydration\", \"`RouterProvider` hydration behavior is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_partialhydration\");\n    }\n    if (routerFuture.v7_skipActionErrorRevalidation === undefined) {\n      logDeprecation(\"v7_skipActionErrorRevalidation\", \"The revalidation behavior after 4xx/5xx `action` responses is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation\");\n    }\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    if (v7_startTransition && startTransitionImpl) {\n      startTransitionImpl(() => setStateImpl(newState));\n    } else {\n      setStateImpl(newState);\n    }\n  }, [setStateImpl, v7_startTransition]);\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  React.useEffect(() => logV6DeprecationWarnings(future, router.future), [router, future]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/v6/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/v6/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    future,\n    static: isStatic\n  } = React.useContext(NavigationContext);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!isStatic, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(to, UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === \"path\");\n  let jsonPath = JSON.stringify(path);\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/v6/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/v6/components/route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/v6/router-components/router\n */\nfunction Router(_ref5) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false,\n    future\n  } = _ref5;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp,\n    future: _extends({\n      v7_relativeSplatPath: false\n    }, future)\n  }), [basename, future, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/v6/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = \"_error\" in promise ? AwaitRenderStatus.error : \"_data\" in promise ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/v6/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.element) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.HydrateFallback) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.hydrateFallbackElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - \" + \"`HydrateFallback` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\n      HydrateFallback: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.errorElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation\n  }).initialize();\n}\n\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, logV6DeprecationWarnings as UNSAFE_logV6DeprecationWarnings, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\n//# sourceMappingURL=index.js.map\n","/**\n * React Router DOM v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { UNSAFE_mapRouteProperties, UNSAFE_logV6DeprecationWarnings, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, useBlocker } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, replace, resolvePath, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\nexport { UNSAFE_ErrorResponseImpl } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"viewTransition\"];\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"6\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\n  isTransitioning: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\nif (process.env.NODE_ENV !== \"production\") {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      flushSync: flushSync,\n      viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    let isViewTransitionUnavailable = router.window == null || router.window.document == null || typeof router.window.document.startViewTransition !== \"function\";\n    // If this isn't a view transition or it's not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  let routerFuture = React.useMemo(() => ({\n    v7_relativeSplatPath: router.future.v7_relativeSplatPath\n  }), [router.future.v7_relativeSplatPath]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future, router.future), [future, router.future]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: routerFuture\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(MemoizedDataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\n// Memoize to avoid re-renders when updating `ViewTransitionContext`\nconst MemoizedDataRoutes = /*#__PURE__*/React.memo(DataRoutes);\nfunction DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we're looking for a slash _after_ what's in `to`.  For example:\n  //\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    viewTransition: viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        flushSync: options.flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        flushSync: options.flushSync,\n        viewTransition: options.viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    let indexValues = params.getAll(\"index\");\n    let hasNakedIndexParam = indexValues.some(v => v === \"\");\n    if (hasNakedIndexParam) {\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return _extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit, useViewTransitionState };\n//# sourceMappingURL=index.js.map\n","// src/subscribable.ts\nvar Subscribable = class {\n  constructor() {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.subscribe = this.subscribe.bind(this);\n  }\n  subscribe(listener) {\n    this.listeners.add(listener);\n    this.onSubscribe();\n    return () => {\n      this.listeners.delete(listener);\n      this.onUnsubscribe();\n    };\n  }\n  hasListeners() {\n    return this.listeners.size > 0;\n  }\n  onSubscribe() {\n  }\n  onUnsubscribe() {\n  }\n};\nexport {\n  Subscribable\n};\n//# sourceMappingURL=subscribable.js.map","// src/timeoutManager.ts\nvar defaultTimeoutProvider = {\n  // We need the wrapper function syntax below instead of direct references to\n  // global setTimeout etc.\n  //\n  // BAD: `setTimeout: setTimeout`\n  // GOOD: `setTimeout: (cb, delay) => setTimeout(cb, delay)`\n  //\n  // If we use direct references here, then anything that wants to spy on or\n  // replace the global setTimeout (like tests) won't work since we'll already\n  // have a hard reference to the original implementation at the time when this\n  // file was imported.\n  setTimeout: (callback, delay) => setTimeout(callback, delay),\n  clearTimeout: (timeoutId) => clearTimeout(timeoutId),\n  setInterval: (callback, delay) => setInterval(callback, delay),\n  clearInterval: (intervalId) => clearInterval(intervalId)\n};\nvar TimeoutManager = class {\n  // We cannot have TimeoutManager<T> as we must instantiate it with a concrete\n  // type at app boot; and if we leave that type, then any new timer provider\n  // would need to support ReturnType<typeof setTimeout>, which is infeasible.\n  //\n  // We settle for type safety for the TimeoutProvider type, and accept that\n  // this class is unsafe internally to allow for extension.\n  #provider = defaultTimeoutProvider;\n  #providerCalled = false;\n  setTimeoutProvider(provider) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (this.#providerCalled && provider !== this.#provider) {\n        console.error(\n          `[timeoutManager]: Switching provider after calls to previous provider might result in unexpected behavior.`,\n          { previous: this.#provider, provider }\n        );\n      }\n    }\n    this.#provider = provider;\n    if (process.env.NODE_ENV !== \"production\") {\n      this.#providerCalled = false;\n    }\n  }\n  setTimeout(callback, delay) {\n    if (process.env.NODE_ENV !== \"production\") {\n      this.#providerCalled = true;\n    }\n    return this.#provider.setTimeout(callback, delay);\n  }\n  clearTimeout(timeoutId) {\n    this.#provider.clearTimeout(timeoutId);\n  }\n  setInterval(callback, delay) {\n    if (process.env.NODE_ENV !== \"production\") {\n      this.#providerCalled = true;\n    }\n    return this.#provider.setInterval(callback, delay);\n  }\n  clearInterval(intervalId) {\n    this.#provider.clearInterval(intervalId);\n  }\n};\nvar timeoutManager = new TimeoutManager();\nfunction systemSetTimeoutZero(callback) {\n  setTimeout(callback, 0);\n}\nexport {\n  TimeoutManager,\n  defaultTimeoutProvider,\n  systemSetTimeoutZero,\n  timeoutManager\n};\n//# sourceMappingURL=timeoutManager.js.map","// src/utils.ts\nimport { timeoutManager } from \"./timeoutManager.js\";\nvar isServer = typeof window === \"undefined\" || \"Deno\" in globalThis;\nfunction noop() {\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === \"number\" && value >= 0 && value !== Infinity;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction resolveStaleTime(staleTime, query) {\n  return typeof staleTime === \"function\" ? staleTime(query) : staleTime;\n}\nfunction resolveEnabled(enabled, query) {\n  return typeof enabled === \"function\" ? enabled(query) : enabled;\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = \"all\",\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n  if (type !== \"all\") {\n    const isActive = query.isActive();\n    if (type === \"active\" && !isActive) {\n      return false;\n    }\n    if (type === \"inactive\" && isActive) {\n      return false;\n    }\n  }\n  if (typeof stale === \"boolean\" && query.isStale() !== stale) {\n    return false;\n  }\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const { exact, status, predicate, mutationKey } = filters;\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n  if (status && mutation.state.status !== status) {\n    return false;\n  }\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = options?.queryKeyHashFn || hashKey;\n  return hashFn(queryKey);\n}\nfunction hashKey(queryKey) {\n  return JSON.stringify(\n    queryKey,\n    (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n      result[key] = val[key];\n      return result;\n    }, {}) : val\n  );\n}\nfunction partialMatchKey(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    return Object.keys(b).every((key) => partialMatchKey(a[key], b[key]));\n  }\n  return false;\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n  const array = isPlainArray(a) && isPlainArray(b);\n  if (!array && !(isPlainObject(a) && isPlainObject(b))) return b;\n  const aItems = array ? a : Object.keys(a);\n  const aSize = aItems.length;\n  const bItems = array ? b : Object.keys(b);\n  const bSize = bItems.length;\n  const copy = array ? new Array(bSize) : {};\n  let equalItems = 0;\n  for (let i = 0; i < bSize; i++) {\n    const key = array ? i : bItems[i];\n    const aItem = a[key];\n    const bItem = b[key];\n    if (aItem === bItem) {\n      copy[key] = aItem;\n      if (array ? i < aSize : hasOwn.call(a, key)) equalItems++;\n      continue;\n    }\n    if (aItem === null || bItem === null || typeof aItem !== \"object\" || typeof bItem !== \"object\") {\n      copy[key] = bItem;\n      continue;\n    }\n    const v = replaceEqualDeep(aItem, bItem);\n    copy[key] = v;\n    if (v === aItem) equalItems++;\n  }\n  return aSize === bSize && equalItems === aSize ? a : copy;\n}\nfunction shallowEqualObjects(a, b) {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false;\n  }\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n}\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  }\n  const ctor = o.constructor;\n  if (ctor === void 0) {\n    return true;\n  }\n  const prot = ctor.prototype;\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  }\n  if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n    return false;\n  }\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false;\n  }\n  return true;\n}\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction sleep(timeout) {\n  return new Promise((resolve) => {\n    timeoutManager.setTimeout(resolve, timeout);\n  });\n}\nfunction replaceData(prevData, data, options) {\n  if (typeof options.structuralSharing === \"function\") {\n    return options.structuralSharing(prevData, data);\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== \"production\") {\n      try {\n        return replaceEqualDeep(prevData, data);\n      } catch (error) {\n        console.error(\n          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`\n        );\n        throw error;\n      }\n    }\n    return replaceEqualDeep(prevData, data);\n  }\n  return data;\n}\nfunction keepPreviousData(previousData) {\n  return previousData;\n}\nfunction addToEnd(items, item, max = 0) {\n  const newItems = [...items, item];\n  return max && newItems.length > max ? newItems.slice(1) : newItems;\n}\nfunction addToStart(items, item, max = 0) {\n  const newItems = [item, ...items];\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems;\n}\nvar skipToken = Symbol();\nfunction ensureQueryFn(options, fetchOptions) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (options.queryFn === skipToken) {\n      console.error(\n        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`\n      );\n    }\n  }\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise;\n  }\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () => Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`));\n  }\n  return options.queryFn;\n}\nfunction shouldThrowError(throwOnError, params) {\n  if (typeof throwOnError === \"function\") {\n    return throwOnError(...params);\n  }\n  return !!throwOnError;\n}\nexport {\n  addToEnd,\n  addToStart,\n  ensureQueryFn,\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  isPlainArray,\n  isPlainObject,\n  isServer,\n  isValidTimeout,\n  keepPreviousData,\n  matchMutation,\n  matchQuery,\n  noop,\n  partialMatchKey,\n  replaceData,\n  replaceEqualDeep,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  shouldThrowError,\n  skipToken,\n  sleep,\n  timeUntilStale\n};\n//# sourceMappingURL=utils.js.map","// src/focusManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar FocusManager = class extends Subscribable {\n  #focused;\n  #cleanup;\n  #setup;\n  constructor() {\n    super();\n    this.#setup = (onFocus) => {\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus();\n        window.addEventListener(\"visibilitychange\", listener, false);\n        return () => {\n          window.removeEventListener(\"visibilitychange\", listener);\n        };\n      }\n      return;\n    };\n  }\n  onSubscribe() {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.();\n      this.#cleanup = void 0;\n    }\n  }\n  setEventListener(setup) {\n    this.#setup = setup;\n    this.#cleanup?.();\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === \"boolean\") {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n  setFocused(focused) {\n    const changed = this.#focused !== focused;\n    if (changed) {\n      this.#focused = focused;\n      this.onFocus();\n    }\n  }\n  onFocus() {\n    const isFocused = this.isFocused();\n    this.listeners.forEach((listener) => {\n      listener(isFocused);\n    });\n  }\n  isFocused() {\n    if (typeof this.#focused === \"boolean\") {\n      return this.#focused;\n    }\n    return globalThis.document?.visibilityState !== \"hidden\";\n  }\n};\nvar focusManager = new FocusManager();\nexport {\n  FocusManager,\n  focusManager\n};\n//# sourceMappingURL=focusManager.js.map","// src/notifyManager.ts\nimport { systemSetTimeoutZero } from \"./timeoutManager.js\";\nvar defaultScheduler = systemSetTimeoutZero;\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n  let notifyFn = (callback) => {\n    callback();\n  };\n  let batchNotifyFn = (callback) => {\n    callback();\n  };\n  let scheduleFn = defaultScheduler;\n  const schedule = (callback) => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  return {\n    batch: (callback) => {\n      let result;\n      transactions++;\n      try {\n        result = callback();\n      } finally {\n        transactions--;\n        if (!transactions) {\n          flush();\n        }\n      }\n      return result;\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: (callback) => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args);\n        });\n      };\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn) => {\n      notifyFn = fn;\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn) => {\n      batchNotifyFn = fn;\n    },\n    setScheduler: (fn) => {\n      scheduleFn = fn;\n    }\n  };\n}\nvar notifyManager = createNotifyManager();\nexport {\n  createNotifyManager,\n  defaultScheduler,\n  notifyManager\n};\n//# sourceMappingURL=notifyManager.js.map","// src/onlineManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar OnlineManager = class extends Subscribable {\n  #online = true;\n  #cleanup;\n  #setup;\n  constructor() {\n    super();\n    this.#setup = (onOnline) => {\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true);\n        const offlineListener = () => onOnline(false);\n        window.addEventListener(\"online\", onlineListener, false);\n        window.addEventListener(\"offline\", offlineListener, false);\n        return () => {\n          window.removeEventListener(\"online\", onlineListener);\n          window.removeEventListener(\"offline\", offlineListener);\n        };\n      }\n      return;\n    };\n  }\n  onSubscribe() {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.();\n      this.#cleanup = void 0;\n    }\n  }\n  setEventListener(setup) {\n    this.#setup = setup;\n    this.#cleanup?.();\n    this.#cleanup = setup(this.setOnline.bind(this));\n  }\n  setOnline(online) {\n    const changed = this.#online !== online;\n    if (changed) {\n      this.#online = online;\n      this.listeners.forEach((listener) => {\n        listener(online);\n      });\n    }\n  }\n  isOnline() {\n    return this.#online;\n  }\n};\nvar onlineManager = new OnlineManager();\nexport {\n  OnlineManager,\n  onlineManager\n};\n//# sourceMappingURL=onlineManager.js.map","// src/retryer.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport { isServer, sleep } from \"./utils.js\";\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1e3 * 2 ** failureCount, 3e4);\n}\nfunction canFetch(networkMode) {\n  return (networkMode ?? \"online\") === \"online\" ? onlineManager.isOnline() : true;\n}\nvar CancelledError = class extends Error {\n  constructor(options) {\n    super(\"CancelledError\");\n    this.revert = options?.revert;\n    this.silent = options?.silent;\n  }\n};\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let continueFn;\n  const thenable = pendingThenable();\n  const isResolved = () => thenable.status !== \"pending\";\n  const cancel = (cancelOptions) => {\n    if (!isResolved()) {\n      const error = new CancelledError(cancelOptions);\n      reject(error);\n      config.onCancel?.(error);\n    }\n  };\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n  const canContinue = () => focusManager.isFocused() && (config.networkMode === \"always\" || onlineManager.isOnline()) && config.canRun();\n  const canStart = () => canFetch(config.networkMode) && config.canRun();\n  const resolve = (value) => {\n    if (!isResolved()) {\n      continueFn?.();\n      thenable.resolve(value);\n    }\n  };\n  const reject = (value) => {\n    if (!isResolved()) {\n      continueFn?.();\n      thenable.reject(value);\n    }\n  };\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved() || canContinue()) {\n          continueResolve(value);\n        }\n      };\n      config.onPause?.();\n    }).then(() => {\n      continueFn = void 0;\n      if (!isResolved()) {\n        config.onContinue?.();\n      }\n    });\n  };\n  const run = () => {\n    if (isResolved()) {\n      return;\n    }\n    let promiseOrValue;\n    const initialPromise = failureCount === 0 ? config.initialPromise : void 0;\n    try {\n      promiseOrValue = initialPromise ?? config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n    Promise.resolve(promiseOrValue).then(resolve).catch((error) => {\n      if (isResolved()) {\n        return;\n      }\n      const retry = config.retry ?? (isServer ? 0 : 3);\n      const retryDelay = config.retryDelay ?? defaultRetryDelay;\n      const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n      if (isRetryCancelled || !shouldRetry) {\n        reject(error);\n        return;\n      }\n      failureCount++;\n      config.onFail?.(failureCount, error);\n      sleep(delay).then(() => {\n        return canContinue() ? void 0 : pause();\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  };\n  return {\n    promise: thenable,\n    status: () => thenable.status,\n    cancel,\n    continue: () => {\n      continueFn?.();\n      return thenable;\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      if (canStart()) {\n        run();\n      } else {\n        pause().then(run);\n      }\n      return thenable;\n    }\n  };\n}\nexport {\n  CancelledError,\n  canFetch,\n  createRetryer,\n  isCancelledError\n};\n//# sourceMappingURL=retryer.js.map","// src/thenable.ts\nimport { noop } from \"./utils.js\";\nfunction pendingThenable() {\n  let resolve;\n  let reject;\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  thenable.status = \"pending\";\n  thenable.catch(() => {\n  });\n  function finalize(data) {\n    Object.assign(thenable, data);\n    delete thenable.resolve;\n    delete thenable.reject;\n  }\n  thenable.resolve = (value) => {\n    finalize({\n      status: \"fulfilled\",\n      value\n    });\n    resolve(value);\n  };\n  thenable.reject = (reason) => {\n    finalize({\n      status: \"rejected\",\n      reason\n    });\n    reject(reason);\n  };\n  return thenable;\n}\nfunction tryResolveSync(promise) {\n  let data;\n  promise.then((result) => {\n    data = result;\n    return result;\n  }, noop)?.catch(noop);\n  if (data !== void 0) {\n    return { data };\n  }\n  return void 0;\n}\nexport {\n  pendingThenable,\n  tryResolveSync\n};\n//# sourceMappingURL=thenable.js.map","// src/removable.ts\nimport { timeoutManager } from \"./timeoutManager.js\";\nimport { isServer, isValidTimeout } from \"./utils.js\";\nvar Removable = class {\n  #gcTimeout;\n  destroy() {\n    this.clearGcTimeout();\n  }\n  scheduleGc() {\n    this.clearGcTimeout();\n    if (isValidTimeout(this.gcTime)) {\n      this.#gcTimeout = timeoutManager.setTimeout(() => {\n        this.optionalRemove();\n      }, this.gcTime);\n    }\n  }\n  updateGcTime(newGcTime) {\n    this.gcTime = Math.max(\n      this.gcTime || 0,\n      newGcTime ?? (isServer ? Infinity : 5 * 60 * 1e3)\n    );\n  }\n  clearGcTimeout() {\n    if (this.#gcTimeout) {\n      timeoutManager.clearTimeout(this.#gcTimeout);\n      this.#gcTimeout = void 0;\n    }\n  }\n};\nexport {\n  Removable\n};\n//# sourceMappingURL=removable.js.map","// src/query.ts\nimport {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  skipToken,\n  timeUntilStale\n} from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { CancelledError, canFetch, createRetryer } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar Query = class extends Removable {\n  #initialState;\n  #revertState;\n  #cache;\n  #client;\n  #retryer;\n  #defaultOptions;\n  #abortSignalConsumed;\n  constructor(config) {\n    super();\n    this.#abortSignalConsumed = false;\n    this.#defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.#client = config.client;\n    this.#cache = this.#client.getQueryCache();\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.#initialState = getDefaultState(this.options);\n    this.state = config.state ?? this.#initialState;\n    this.scheduleGc();\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  get promise() {\n    return this.#retryer?.promise;\n  }\n  setOptions(options) {\n    this.options = { ...this.#defaultOptions, ...options };\n    this.updateGcTime(this.options.gcTime);\n    if (this.state && this.state.data === void 0) {\n      const defaultState = getDefaultState(this.options);\n      if (defaultState.data !== void 0) {\n        this.setData(defaultState.data, {\n          updatedAt: defaultState.dataUpdatedAt,\n          manual: true\n        });\n        this.#initialState = defaultState;\n      }\n    }\n  }\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n      this.#cache.remove(this);\n    }\n  }\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options);\n    this.#dispatch({\n      data,\n      type: \"success\",\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual\n    });\n    return data;\n  }\n  setState(state, setStateOptions) {\n    this.#dispatch({ type: \"setState\", state, setStateOptions });\n  }\n  cancel(options) {\n    const promise = this.#retryer?.promise;\n    this.#retryer?.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n  destroy() {\n    super.destroy();\n    this.cancel({ silent: true });\n  }\n  reset() {\n    this.destroy();\n    this.setState(this.#initialState);\n  }\n  isActive() {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false\n    );\n  }\n  isDisabled() {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive();\n    }\n    return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;\n  }\n  isStatic() {\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => resolveStaleTime(observer.options.staleTime, this) === \"static\"\n      );\n    }\n    return false;\n  }\n  isStale() {\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale\n      );\n    }\n    return this.state.data === void 0 || this.state.isInvalidated;\n  }\n  isStaleByTime(staleTime = 0) {\n    if (this.state.data === void 0) {\n      return true;\n    }\n    if (staleTime === \"static\") {\n      return false;\n    }\n    if (this.state.isInvalidated) {\n      return true;\n    }\n    return !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n  onFocus() {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus());\n    observer?.refetch({ cancelRefetch: false });\n    this.#retryer?.continue();\n  }\n  onOnline() {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect());\n    observer?.refetch({ cancelRefetch: false });\n    this.#retryer?.continue();\n  }\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer);\n      this.clearGcTimeout();\n      this.#cache.notify({ type: \"observerAdded\", query: this, observer });\n    }\n  }\n  removeObserver(observer) {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer);\n      if (!this.observers.length) {\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true });\n          } else {\n            this.#retryer.cancelRetry();\n          }\n        }\n        this.scheduleGc();\n      }\n      this.#cache.notify({ type: \"observerRemoved\", query: this, observer });\n    }\n  }\n  getObserversCount() {\n    return this.observers.length;\n  }\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: \"invalidate\" });\n    }\n  }\n  async fetch(options, fetchOptions) {\n    if (this.state.fetchStatus !== \"idle\" && // If the promise in the retyer is already rejected, we have to definitely\n    // re-start the fetch; there is a chance that the query is still in a\n    // pending state when that happens\n    this.#retryer?.status() !== \"rejected\") {\n      if (this.state.data !== void 0 && fetchOptions?.cancelRefetch) {\n        this.cancel({ silent: true });\n      } else if (this.#retryer) {\n        this.#retryer.continueRetry();\n        return this.#retryer.promise;\n      }\n    }\n    if (options) {\n      this.setOptions(options);\n    }\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn);\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`\n        );\n      }\n    }\n    const abortController = new AbortController();\n    const addSignalProperty = (object) => {\n      Object.defineProperty(object, \"signal\", {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true;\n          return abortController.signal;\n        }\n      });\n    };\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions);\n      const createQueryFnContext = () => {\n        const queryFnContext2 = {\n          client: this.#client,\n          queryKey: this.queryKey,\n          meta: this.meta\n        };\n        addSignalProperty(queryFnContext2);\n        return queryFnContext2;\n      };\n      const queryFnContext = createQueryFnContext();\n      this.#abortSignalConsumed = false;\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn,\n          queryFnContext,\n          this\n        );\n      }\n      return queryFn(queryFnContext);\n    };\n    const createFetchContext = () => {\n      const context2 = {\n        fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        client: this.#client,\n        state: this.state,\n        fetchFn\n      };\n      addSignalProperty(context2);\n      return context2;\n    };\n    const context = createFetchContext();\n    this.options.behavior?.onFetch(context, this);\n    this.#revertState = this.state;\n    if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== context.fetchOptions?.meta) {\n      this.#dispatch({ type: \"fetch\", meta: context.fetchOptions?.meta });\n    }\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise,\n      fn: context.fetchFn,\n      onCancel: (error) => {\n        if (error instanceof CancelledError && error.revert) {\n          this.setState({\n            ...this.#revertState,\n            fetchStatus: \"idle\"\n          });\n        }\n        abortController.abort();\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: \"failed\", failureCount, error });\n      },\n      onPause: () => {\n        this.#dispatch({ type: \"pause\" });\n      },\n      onContinue: () => {\n        this.#dispatch({ type: \"continue\" });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true\n    });\n    try {\n      const data = await this.#retryer.start();\n      if (data === void 0) {\n        if (process.env.NODE_ENV !== \"production\") {\n          console.error(\n            `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`\n          );\n        }\n        throw new Error(`${this.queryHash} data is undefined`);\n      }\n      this.setData(data);\n      this.#cache.config.onSuccess?.(data, this);\n      this.#cache.config.onSettled?.(\n        data,\n        this.state.error,\n        this\n      );\n      return data;\n    } catch (error) {\n      if (error instanceof CancelledError) {\n        if (error.silent) {\n          return this.#retryer.promise;\n        } else if (error.revert) {\n          if (this.state.data === void 0) {\n            throw error;\n          }\n          return this.state.data;\n        }\n      }\n      this.#dispatch({\n        type: \"error\",\n        error\n      });\n      this.#cache.config.onError?.(\n        error,\n        this\n      );\n      this.#cache.config.onSettled?.(\n        this.state.data,\n        error,\n        this\n      );\n      throw error;\n    } finally {\n      this.scheduleGc();\n    }\n  }\n  #dispatch(action) {\n    const reducer = (state) => {\n      switch (action.type) {\n        case \"failed\":\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error\n          };\n        case \"pause\":\n          return {\n            ...state,\n            fetchStatus: \"paused\"\n          };\n        case \"continue\":\n          return {\n            ...state,\n            fetchStatus: \"fetching\"\n          };\n        case \"fetch\":\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null\n          };\n        case \"success\":\n          const newState = {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: \"success\",\n            ...!action.manual && {\n              fetchStatus: \"idle\",\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            }\n          };\n          this.#revertState = action.manual ? newState : void 0;\n          return newState;\n        case \"error\":\n          const error = action.error;\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: \"idle\",\n            status: \"error\"\n          };\n        case \"invalidate\":\n          return {\n            ...state,\n            isInvalidated: true\n          };\n        case \"setState\":\n          return {\n            ...state,\n            ...action.state\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate();\n      });\n      this.#cache.notify({ query: this, type: \"updated\", action });\n    });\n  }\n};\nfunction fetchState(data, options) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\",\n    ...data === void 0 && {\n      error: null,\n      status: \"pending\"\n    }\n  };\n}\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  const hasData = data !== void 0;\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\nexport {\n  Query,\n  fetchState\n};\n//# sourceMappingURL=query.js.map","// src/infiniteQueryBehavior.ts\nimport { addToEnd, addToStart, ensureQueryFn } from \"./utils.js\";\nfunction infiniteQueryBehavior(pages) {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options;\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction;\n      const oldPages = context.state.data?.pages || [];\n      const oldPageParams = context.state.data?.pageParams || [];\n      let result = { pages: [], pageParams: [] };\n      let currentPage = 0;\n      const fetchFn = async () => {\n        let cancelled = false;\n        const addSignalProperty = (object) => {\n          Object.defineProperty(object, \"signal\", {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true;\n              } else {\n                context.signal.addEventListener(\"abort\", () => {\n                  cancelled = true;\n                });\n              }\n              return context.signal;\n            }\n          });\n        };\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions);\n        const fetchPage = async (data, param, previous) => {\n          if (cancelled) {\n            return Promise.reject();\n          }\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data);\n          }\n          const createQueryFnContext = () => {\n            const queryFnContext2 = {\n              client: context.client,\n              queryKey: context.queryKey,\n              pageParam: param,\n              direction: previous ? \"backward\" : \"forward\",\n              meta: context.options.meta\n            };\n            addSignalProperty(queryFnContext2);\n            return queryFnContext2;\n          };\n          const queryFnContext = createQueryFnContext();\n          const page = await queryFn(queryFnContext);\n          const { maxPages } = context.options;\n          const addTo = previous ? addToStart : addToEnd;\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages)\n          };\n        };\n        if (direction && oldPages.length) {\n          const previous = direction === \"backward\";\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams\n          };\n          const param = pageParamFn(options, oldData);\n          result = await fetchPage(oldData, param, previous);\n        } else {\n          const remainingPages = pages ?? oldPages.length;\n          do {\n            const param = currentPage === 0 ? oldPageParams[0] ?? options.initialPageParam : getNextPageParam(options, result);\n            if (currentPage > 0 && param == null) {\n              break;\n            }\n            result = await fetchPage(result, param);\n            currentPage++;\n          } while (currentPage < remainingPages);\n        }\n        return result;\n      };\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn,\n            {\n              client: context.client,\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal\n            },\n            query\n          );\n        };\n      } else {\n        context.fetchFn = fetchFn;\n      }\n    }\n  };\n}\nfunction getNextPageParam(options, { pages, pageParams }) {\n  const lastIndex = pages.length - 1;\n  return pages.length > 0 ? options.getNextPageParam(\n    pages[lastIndex],\n    pages,\n    pageParams[lastIndex],\n    pageParams\n  ) : void 0;\n}\nfunction getPreviousPageParam(options, { pages, pageParams }) {\n  return pages.length > 0 ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams) : void 0;\n}\nfunction hasNextPage(options, data) {\n  if (!data) return false;\n  return getNextPageParam(options, data) != null;\n}\nfunction hasPreviousPage(options, data) {\n  if (!data || !options.getPreviousPageParam) return false;\n  return getPreviousPageParam(options, data) != null;\n}\nexport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior\n};\n//# sourceMappingURL=infiniteQueryBehavior.js.map","// src/mutation.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Removable } from \"./removable.js\";\nimport { createRetryer } from \"./retryer.js\";\nvar Mutation = class extends Removable {\n  #observers;\n  #mutationCache;\n  #retryer;\n  constructor(config) {\n    super();\n    this.mutationId = config.mutationId;\n    this.#mutationCache = config.mutationCache;\n    this.#observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n  setOptions(options) {\n    this.options = options;\n    this.updateGcTime(this.options.gcTime);\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  addObserver(observer) {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer);\n      this.clearGcTimeout();\n      this.#mutationCache.notify({\n        type: \"observerAdded\",\n        mutation: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    this.#observers = this.#observers.filter((x) => x !== observer);\n    this.scheduleGc();\n    this.#mutationCache.notify({\n      type: \"observerRemoved\",\n      mutation: this,\n      observer\n    });\n  }\n  optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === \"pending\") {\n        this.scheduleGc();\n      } else {\n        this.#mutationCache.remove(this);\n      }\n    }\n  }\n  continue() {\n    return this.#retryer?.continue() ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n    this.execute(this.state.variables);\n  }\n  async execute(variables) {\n    const onContinue = () => {\n      this.#dispatch({ type: \"continue\" });\n    };\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error(\"No mutationFn found\"));\n        }\n        return this.options.mutationFn(variables);\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: \"failed\", failureCount, error });\n      },\n      onPause: () => {\n        this.#dispatch({ type: \"pause\" });\n      },\n      onContinue,\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this)\n    });\n    const restored = this.state.status === \"pending\";\n    const isPaused = !this.#retryer.canStart();\n    try {\n      if (restored) {\n        onContinue();\n      } else {\n        this.#dispatch({ type: \"pending\", variables, isPaused });\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this\n        );\n        const context = await this.options.onMutate?.(variables);\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: \"pending\",\n            context,\n            variables,\n            isPaused\n          });\n        }\n      }\n      const data = await this.#retryer.start();\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this\n      );\n      await this.options.onSuccess?.(data, variables, this.state.context);\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this\n      );\n      await this.options.onSettled?.(data, null, variables, this.state.context);\n      this.#dispatch({ type: \"success\", data });\n      return data;\n    } catch (error) {\n      try {\n        await this.#mutationCache.config.onError?.(\n          error,\n          variables,\n          this.state.context,\n          this\n        );\n        await this.options.onError?.(\n          error,\n          variables,\n          this.state.context\n        );\n        await this.#mutationCache.config.onSettled?.(\n          void 0,\n          error,\n          this.state.variables,\n          this.state.context,\n          this\n        );\n        await this.options.onSettled?.(\n          void 0,\n          error,\n          variables,\n          this.state.context\n        );\n        throw error;\n      } finally {\n        this.#dispatch({ type: \"error\", error });\n      }\n    } finally {\n      this.#mutationCache.runNext(this);\n    }\n  }\n  #dispatch(action) {\n    const reducer = (state) => {\n      switch (action.type) {\n        case \"failed\":\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n        case \"pause\":\n          return {\n            ...state,\n            isPaused: true\n          };\n        case \"continue\":\n          return {\n            ...state,\n            isPaused: false\n          };\n        case \"pending\":\n          return {\n            ...state,\n            context: action.context,\n            data: void 0,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: \"pending\",\n            variables: action.variables,\n            submittedAt: Date.now()\n          };\n        case \"success\":\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: \"success\",\n            isPaused: false\n          };\n        case \"error\":\n          return {\n            ...state,\n            data: void 0,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: \"error\"\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action);\n      });\n      this.#mutationCache.notify({\n        mutation: this,\n        type: \"updated\",\n        action\n      });\n    });\n  }\n};\nfunction getDefaultState() {\n  return {\n    context: void 0,\n    data: void 0,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: \"idle\",\n    variables: void 0,\n    submittedAt: 0\n  };\n}\nexport {\n  Mutation,\n  getDefaultState\n};\n//# sourceMappingURL=mutation.js.map","// src/mutationCache.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Mutation } from \"./mutation.js\";\nimport { matchMutation, noop } from \"./utils.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar MutationCache = class extends Subscribable {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.#mutations = /* @__PURE__ */ new Set();\n    this.#scopes = /* @__PURE__ */ new Map();\n    this.#mutationId = 0;\n  }\n  #mutations;\n  #scopes;\n  #mutationId;\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state\n    });\n    this.add(mutation);\n    return mutation;\n  }\n  add(mutation) {\n    this.#mutations.add(mutation);\n    const scope = scopeFor(mutation);\n    if (typeof scope === \"string\") {\n      const scopedMutations = this.#scopes.get(scope);\n      if (scopedMutations) {\n        scopedMutations.push(mutation);\n      } else {\n        this.#scopes.set(scope, [mutation]);\n      }\n    }\n    this.notify({ type: \"added\", mutation });\n  }\n  remove(mutation) {\n    if (this.#mutations.delete(mutation)) {\n      const scope = scopeFor(mutation);\n      if (typeof scope === \"string\") {\n        const scopedMutations = this.#scopes.get(scope);\n        if (scopedMutations) {\n          if (scopedMutations.length > 1) {\n            const index = scopedMutations.indexOf(mutation);\n            if (index !== -1) {\n              scopedMutations.splice(index, 1);\n            }\n          } else if (scopedMutations[0] === mutation) {\n            this.#scopes.delete(scope);\n          }\n        }\n      }\n    }\n    this.notify({ type: \"removed\", mutation });\n  }\n  canRun(mutation) {\n    const scope = scopeFor(mutation);\n    if (typeof scope === \"string\") {\n      const mutationsWithSameScope = this.#scopes.get(scope);\n      const firstPendingMutation = mutationsWithSameScope?.find(\n        (m) => m.state.status === \"pending\"\n      );\n      return !firstPendingMutation || firstPendingMutation === mutation;\n    } else {\n      return true;\n    }\n  }\n  runNext(mutation) {\n    const scope = scopeFor(mutation);\n    if (typeof scope === \"string\") {\n      const foundMutation = this.#scopes.get(scope)?.find((m) => m !== mutation && m.state.isPaused);\n      return foundMutation?.continue() ?? Promise.resolve();\n    } else {\n      return Promise.resolve();\n    }\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.#mutations.forEach((mutation) => {\n        this.notify({ type: \"removed\", mutation });\n      });\n      this.#mutations.clear();\n      this.#scopes.clear();\n    });\n  }\n  getAll() {\n    return Array.from(this.#mutations);\n  }\n  find(filters) {\n    const defaultedFilters = { exact: true, ...filters };\n    return this.getAll().find(\n      (mutation) => matchMutation(defaultedFilters, mutation)\n    );\n  }\n  findAll(filters = {}) {\n    return this.getAll().filter((mutation) => matchMutation(filters, mutation));\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event);\n      });\n    });\n  }\n  resumePausedMutations() {\n    const pausedMutations = this.getAll().filter((x) => x.state.isPaused);\n    return notifyManager.batch(\n      () => Promise.all(\n        pausedMutations.map((mutation) => mutation.continue().catch(noop))\n      )\n    );\n  }\n};\nfunction scopeFor(mutation) {\n  return mutation.options.scope?.id;\n}\nexport {\n  MutationCache\n};\n//# sourceMappingURL=mutationCache.js.map","// src/queryCache.ts\nimport { hashQueryKeyByOptions, matchQuery } from \"./utils.js\";\nimport { Query } from \"./query.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar QueryCache = class extends Subscribable {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.#queries = /* @__PURE__ */ new Map();\n  }\n  #queries;\n  build(client, options, state) {\n    const queryKey = options.queryKey;\n    const queryHash = options.queryHash ?? hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n    if (!query) {\n      query = new Query({\n        client,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey)\n      });\n      this.add(query);\n    }\n    return query;\n  }\n  add(query) {\n    if (!this.#queries.has(query.queryHash)) {\n      this.#queries.set(query.queryHash, query);\n      this.notify({\n        type: \"added\",\n        query\n      });\n    }\n  }\n  remove(query) {\n    const queryInMap = this.#queries.get(query.queryHash);\n    if (queryInMap) {\n      query.destroy();\n      if (queryInMap === query) {\n        this.#queries.delete(query.queryHash);\n      }\n      this.notify({ type: \"removed\", query });\n    }\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        this.remove(query);\n      });\n    });\n  }\n  get(queryHash) {\n    return this.#queries.get(queryHash);\n  }\n  getAll() {\n    return [...this.#queries.values()];\n  }\n  find(filters) {\n    const defaultedFilters = { exact: true, ...filters };\n    return this.getAll().find(\n      (query) => matchQuery(defaultedFilters, query)\n    );\n  }\n  findAll(filters = {}) {\n    const queries = this.getAll();\n    return Object.keys(filters).length > 0 ? queries.filter((query) => matchQuery(filters, query)) : queries;\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event);\n      });\n    });\n  }\n  onFocus() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onFocus();\n      });\n    });\n  }\n  onOnline() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onOnline();\n      });\n    });\n  }\n};\nexport {\n  QueryCache\n};\n//# sourceMappingURL=queryCache.js.map","// src/queryClient.ts\nimport {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken\n} from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = class {\n  #queryCache;\n  #mutationCache;\n  #defaultOptions;\n  #queryDefaults;\n  #mutationDefaults;\n  #mountCount;\n  #unsubscribeFocus;\n  #unsubscribeOnline;\n  constructor(config = {}) {\n    this.#queryCache = config.queryCache || new QueryCache();\n    this.#mutationCache = config.mutationCache || new MutationCache();\n    this.#defaultOptions = config.defaultOptions || {};\n    this.#queryDefaults = /* @__PURE__ */ new Map();\n    this.#mutationDefaults = /* @__PURE__ */ new Map();\n    this.#mountCount = 0;\n  }\n  mount() {\n    this.#mountCount++;\n    if (this.#mountCount !== 1) return;\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations();\n        this.#queryCache.onFocus();\n      }\n    });\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations();\n        this.#queryCache.onOnline();\n      }\n    });\n  }\n  unmount() {\n    this.#mountCount--;\n    if (this.#mountCount !== 0) return;\n    this.#unsubscribeFocus?.();\n    this.#unsubscribeFocus = void 0;\n    this.#unsubscribeOnline?.();\n    this.#unsubscribeOnline = void 0;\n  }\n  isFetching(filters) {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: \"fetching\" }).length;\n  }\n  isMutating(filters) {\n    return this.#mutationCache.findAll({ ...filters, status: \"pending\" }).length;\n  }\n  /**\n   * Imperative (non-reactive) way to retrieve data for a QueryKey.\n   * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.\n   *\n   * Hint: Do not use this function inside a component, because it won't receive updates.\n   * Use `useQuery` to create a `QueryObserver` that subscribes to changes.\n   */\n  getQueryData(queryKey) {\n    const options = this.defaultQueryOptions({ queryKey });\n    return this.#queryCache.get(options.queryHash)?.state.data;\n  }\n  ensureQueryData(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n    const query = this.#queryCache.build(this, defaultedOptions);\n    const cachedData = query.state.data;\n    if (cachedData === void 0) {\n      return this.fetchQuery(options);\n    }\n    if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {\n      void this.prefetchQuery(defaultedOptions);\n    }\n    return Promise.resolve(cachedData);\n  }\n  getQueriesData(filters) {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n  setQueryData(queryKey, updater, options) {\n    const defaultedOptions = this.defaultQueryOptions({ queryKey });\n    const query = this.#queryCache.get(\n      defaultedOptions.queryHash\n    );\n    const prevData = query?.state.data;\n    const data = functionalUpdate(updater, prevData);\n    if (data === void 0) {\n      return void 0;\n    }\n    return this.#queryCache.build(this, defaultedOptions).setData(data, { ...options, manual: true });\n  }\n  setQueriesData(filters, updater, options) {\n    return notifyManager.batch(\n      () => this.#queryCache.findAll(filters).map(({ queryKey }) => [\n        queryKey,\n        this.setQueryData(queryKey, updater, options)\n      ])\n    );\n  }\n  getQueryState(queryKey) {\n    const options = this.defaultQueryOptions({ queryKey });\n    return this.#queryCache.get(\n      options.queryHash\n    )?.state;\n  }\n  removeQueries(filters) {\n    const queryCache = this.#queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query);\n      });\n    });\n  }\n  resetQueries(filters, options) {\n    const queryCache = this.#queryCache;\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset();\n      });\n      return this.refetchQueries(\n        {\n          type: \"active\",\n          ...filters\n        },\n        options\n      );\n    });\n  }\n  cancelQueries(filters, cancelOptions = {}) {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions };\n    const promises = notifyManager.batch(\n      () => this.#queryCache.findAll(filters).map((query) => query.cancel(defaultedCancelOptions))\n    );\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n  invalidateQueries(filters, options = {}) {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate();\n      });\n      if (filters?.refetchType === \"none\") {\n        return Promise.resolve();\n      }\n      return this.refetchQueries(\n        {\n          ...filters,\n          type: filters?.refetchType ?? filters?.type ?? \"active\"\n        },\n        options\n      );\n    });\n  }\n  refetchQueries(filters, options = {}) {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options.cancelRefetch ?? true\n    };\n    const promises = notifyManager.batch(\n      () => this.#queryCache.findAll(filters).filter((query) => !query.isDisabled() && !query.isStatic()).map((query) => {\n        let promise = query.fetch(void 0, fetchOptions);\n        if (!fetchOptions.throwOnError) {\n          promise = promise.catch(noop);\n        }\n        return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n      })\n    );\n    return Promise.all(promises).then(noop);\n  }\n  fetchQuery(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n    if (defaultedOptions.retry === void 0) {\n      defaultedOptions.retry = false;\n    }\n    const query = this.#queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query)\n    ) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n  prefetchQuery(options) {\n    return this.fetchQuery(options).then(noop).catch(noop);\n  }\n  fetchInfiniteQuery(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.fetchQuery(options);\n  }\n  prefetchInfiniteQuery(options) {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n  }\n  ensureInfiniteQueryData(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.ensureQueryData(options);\n  }\n  resumePausedMutations() {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations();\n    }\n    return Promise.resolve();\n  }\n  getQueryCache() {\n    return this.#queryCache;\n  }\n  getMutationCache() {\n    return this.#mutationCache;\n  }\n  getDefaultOptions() {\n    return this.#defaultOptions;\n  }\n  setDefaultOptions(options) {\n    this.#defaultOptions = options;\n  }\n  setQueryDefaults(queryKey, options) {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options\n    });\n  }\n  getQueryDefaults(queryKey) {\n    const defaults = [...this.#queryDefaults.values()];\n    const result = {};\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        Object.assign(result, queryDefault.defaultOptions);\n      }\n    });\n    return result;\n  }\n  setMutationDefaults(mutationKey, options) {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options\n    });\n  }\n  getMutationDefaults(mutationKey) {\n    const defaults = [...this.#mutationDefaults.values()];\n    const result = {};\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        Object.assign(result, queryDefault.defaultOptions);\n      }\n    });\n    return result;\n  }\n  defaultQueryOptions(options) {\n    if (options._defaulted) {\n      return options;\n    }\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      );\n    }\n    if (defaultedOptions.refetchOnReconnect === void 0) {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n    }\n    if (defaultedOptions.throwOnError === void 0) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n    }\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = \"offlineFirst\";\n    }\n    if (defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false;\n    }\n    return defaultedOptions;\n  }\n  defaultMutationOptions(options) {\n    if (options?._defaulted) {\n      return options;\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...options?.mutationKey && this.getMutationDefaults(options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n  clear() {\n    this.#queryCache.clear();\n    this.#mutationCache.clear();\n  }\n};\nexport {\n  QueryClient\n};\n//# sourceMappingURL=queryClient.js.map","\"use client\";\n\n// src/QueryClientProvider.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar QueryClientContext = React.createContext(\n  void 0\n);\nvar useQueryClient = (queryClient) => {\n  const client = React.useContext(QueryClientContext);\n  if (queryClient) {\n    return queryClient;\n  }\n  if (!client) {\n    throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n  }\n  return client;\n};\nvar QueryClientProvider = ({\n  client,\n  children\n}) => {\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  return /* @__PURE__ */ jsx(QueryClientContext.Provider, { value: client, children });\n};\nexport {\n  QueryClientContext,\n  QueryClientProvider,\n  useQueryClient\n};\n//# sourceMappingURL=QueryClientProvider.js.map","/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nvar hasElementType = typeof Element !== 'undefined';\nvar hasMap = typeof Map === 'function';\nvar hasSet = typeof Set === 'function';\nvar hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;\n\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\n\nfunction equal(a, b) {\n  // START: fast-deep-equal es6/index.js 3.1.3\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it;\n    if (hasMap && (a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      return true;\n    }\n\n    if (hasSet && (a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      return true;\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    // START: Modifications:\n    // Apply guards for `Object.create(null)` handling. See:\n    // - https://github.com/FormidableLabs/react-fast-compare/issues/64\n    // - https://github.com/epoberezkin/fast-deep-equal/issues/49\n    if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();\n    // END: Modifications\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    // END: fast-deep-equal\n\n    // START: react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element) return false;\n\n    // custom handling for React/Preact\n    for (i = length; i-- !== 0;) {\n      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner\n        // Preact-specific: avoid traversing Preact elements' __v and __o\n        //    __v = $_original / $_vnode\n        //    __o = $_owner\n        // These properties contain circular references and are not needed when\n        // comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of elements\n\n        continue;\n      }\n\n      // all other properties should be traversed as usual\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n    // END: react-fast-compare\n\n    // START: fast-deep-equal\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if (((error.message || '').match(/stack|recursion/i))) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A's keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import t,{Component as e}from\"react\";import r from\"prop-types\";import n from\"react-fast-compare\";import i from\"invariant\";import o from\"shallowequal\";function a(){return a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},a.apply(this,arguments)}function s(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,c(t,e)}function c(t,e){return c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},c(t,e)}function u(t,e){if(null==t)return{};var r,n,i={},o=Object.keys(t);for(n=0;n<o.length;n++)e.indexOf(r=o[n])>=0||(i[r]=t[r]);return i}var l={BASE:\"base\",BODY:\"body\",HEAD:\"head\",HTML:\"html\",LINK:\"link\",META:\"meta\",NOSCRIPT:\"noscript\",SCRIPT:\"script\",STYLE:\"style\",TITLE:\"title\",FRAGMENT:\"Symbol(react.fragment)\"},p={rel:[\"amphtml\",\"canonical\",\"alternate\"]},f={type:[\"application/ld+json\"]},d={charset:\"\",name:[\"robots\",\"description\"],property:[\"og:type\",\"og:title\",\"og:url\",\"og:image\",\"og:image:alt\",\"og:description\",\"twitter:url\",\"twitter:title\",\"twitter:description\",\"twitter:image\",\"twitter:image:alt\",\"twitter:card\",\"twitter:site\"]},h=Object.keys(l).map(function(t){return l[t]}),m={accesskey:\"accessKey\",charset:\"charSet\",class:\"className\",contenteditable:\"contentEditable\",contextmenu:\"contextMenu\",\"http-equiv\":\"httpEquiv\",itemprop:\"itemProp\",tabindex:\"tabIndex\"},y=Object.keys(m).reduce(function(t,e){return t[m[e]]=e,t},{}),T=function(t,e){for(var r=t.length-1;r>=0;r-=1){var n=t[r];if(Object.prototype.hasOwnProperty.call(n,e))return n[e]}return null},g=function(t){var e=T(t,l.TITLE),r=T(t,\"titleTemplate\");if(Array.isArray(e)&&(e=e.join(\"\")),r&&e)return r.replace(/%s/g,function(){return e});var n=T(t,\"defaultTitle\");return e||n||void 0},b=function(t){return T(t,\"onChangeClientState\")||function(){}},v=function(t,e){return e.filter(function(e){return void 0!==e[t]}).map(function(e){return e[t]}).reduce(function(t,e){return a({},t,e)},{})},A=function(t,e){return e.filter(function(t){return void 0!==t[l.BASE]}).map(function(t){return t[l.BASE]}).reverse().reduce(function(e,r){if(!e.length)for(var n=Object.keys(r),i=0;i<n.length;i+=1){var o=n[i].toLowerCase();if(-1!==t.indexOf(o)&&r[o])return e.concat(r)}return e},[])},C=function(t,e,r){var n={};return r.filter(function(e){return!!Array.isArray(e[t])||(void 0!==e[t]&&console&&\"function\"==typeof console.warn&&console.warn(\"Helmet: \"+t+' should be of type \"Array\". Instead found type \"'+typeof e[t]+'\"'),!1)}).map(function(e){return e[t]}).reverse().reduce(function(t,r){var i={};r.filter(function(t){for(var r,o=Object.keys(t),a=0;a<o.length;a+=1){var s=o[a],c=s.toLowerCase();-1===e.indexOf(c)||\"rel\"===r&&\"canonical\"===t[r].toLowerCase()||\"rel\"===c&&\"stylesheet\"===t[c].toLowerCase()||(r=c),-1===e.indexOf(s)||\"innerHTML\"!==s&&\"cssText\"!==s&&\"itemprop\"!==s||(r=s)}if(!r||!t[r])return!1;var u=t[r].toLowerCase();return n[r]||(n[r]={}),i[r]||(i[r]={}),!n[r][u]&&(i[r][u]=!0,!0)}).reverse().forEach(function(e){return t.push(e)});for(var o=Object.keys(i),s=0;s<o.length;s+=1){var c=o[s],u=a({},n[c],i[c]);n[c]=u}return t},[]).reverse()},O=function(t,e){if(Array.isArray(t)&&t.length)for(var r=0;r<t.length;r+=1)if(t[r][e])return!0;return!1},S=function(t){return Array.isArray(t)?t.join(\"\"):t},E=function(t,e){return Array.isArray(t)?t.reduce(function(t,r){return function(t,e){for(var r=Object.keys(t),n=0;n<r.length;n+=1)if(e[r[n]]&&e[r[n]].includes(t[r[n]]))return!0;return!1}(r,e)?t.priority.push(r):t.default.push(r),t},{priority:[],default:[]}):{default:t}},I=function(t,e){var r;return a({},t,((r={})[e]=void 0,r))},P=[l.NOSCRIPT,l.SCRIPT,l.STYLE],w=function(t,e){return void 0===e&&(e=!0),!1===e?String(t):String(t).replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#x27;\")},x=function(t){return Object.keys(t).reduce(function(e,r){var n=void 0!==t[r]?r+'=\"'+t[r]+'\"':\"\"+r;return e?e+\" \"+n:n},\"\")},L=function(t,e){return void 0===e&&(e={}),Object.keys(t).reduce(function(e,r){return e[m[r]||r]=t[r],e},e)},j=function(e,r){return r.map(function(r,n){var i,o=((i={key:n})[\"data-rh\"]=!0,i);return Object.keys(r).forEach(function(t){var e=m[t]||t;\"innerHTML\"===e||\"cssText\"===e?o.dangerouslySetInnerHTML={__html:r.innerHTML||r.cssText}:o[e]=r[t]}),t.createElement(e,o)})},M=function(e,r,n){switch(e){case l.TITLE:return{toComponent:function(){return n=r.titleAttributes,(i={key:e=r.title})[\"data-rh\"]=!0,o=L(n,i),[t.createElement(l.TITLE,o,e)];var e,n,i,o},toString:function(){return function(t,e,r,n){var i=x(r),o=S(e);return i?\"<\"+t+' data-rh=\"true\" '+i+\">\"+w(o,n)+\"</\"+t+\">\":\"<\"+t+' data-rh=\"true\">'+w(o,n)+\"</\"+t+\">\"}(e,r.title,r.titleAttributes,n)}};case\"bodyAttributes\":case\"htmlAttributes\":return{toComponent:function(){return L(r)},toString:function(){return x(r)}};default:return{toComponent:function(){return j(e,r)},toString:function(){return function(t,e,r){return e.reduce(function(e,n){var i=Object.keys(n).filter(function(t){return!(\"innerHTML\"===t||\"cssText\"===t)}).reduce(function(t,e){var i=void 0===n[e]?e:e+'=\"'+w(n[e],r)+'\"';return t?t+\" \"+i:i},\"\"),o=n.innerHTML||n.cssText||\"\",a=-1===P.indexOf(t);return e+\"<\"+t+' data-rh=\"true\" '+i+(a?\"/>\":\">\"+o+\"</\"+t+\">\")},\"\")}(e,r,n)}}}},k=function(t){var e=t.baseTag,r=t.bodyAttributes,n=t.encode,i=t.htmlAttributes,o=t.noscriptTags,a=t.styleTags,s=t.title,c=void 0===s?\"\":s,u=t.titleAttributes,h=t.linkTags,m=t.metaTags,y=t.scriptTags,T={toComponent:function(){},toString:function(){return\"\"}};if(t.prioritizeSeoTags){var g=function(t){var e=t.linkTags,r=t.scriptTags,n=t.encode,i=E(t.metaTags,d),o=E(e,p),a=E(r,f);return{priorityMethods:{toComponent:function(){return[].concat(j(l.META,i.priority),j(l.LINK,o.priority),j(l.SCRIPT,a.priority))},toString:function(){return M(l.META,i.priority,n)+\" \"+M(l.LINK,o.priority,n)+\" \"+M(l.SCRIPT,a.priority,n)}},metaTags:i.default,linkTags:o.default,scriptTags:a.default}}(t);T=g.priorityMethods,h=g.linkTags,m=g.metaTags,y=g.scriptTags}return{priority:T,base:M(l.BASE,e,n),bodyAttributes:M(\"bodyAttributes\",r,n),htmlAttributes:M(\"htmlAttributes\",i,n),link:M(l.LINK,h,n),meta:M(l.META,m,n),noscript:M(l.NOSCRIPT,o,n),script:M(l.SCRIPT,y,n),style:M(l.STYLE,a,n),title:M(l.TITLE,{title:c,titleAttributes:u},n)}},H=[],N=function(t,e){var r=this;void 0===e&&(e=\"undefined\"!=typeof document),this.instances=[],this.value={setHelmet:function(t){r.context.helmet=t},helmetInstances:{get:function(){return r.canUseDOM?H:r.instances},add:function(t){(r.canUseDOM?H:r.instances).push(t)},remove:function(t){var e=(r.canUseDOM?H:r.instances).indexOf(t);(r.canUseDOM?H:r.instances).splice(e,1)}}},this.context=t,this.canUseDOM=e,e||(t.helmet=k({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:\"\",titleAttributes:{}}))},R=t.createContext({}),D=r.shape({setHelmet:r.func,helmetInstances:r.shape({get:r.func,add:r.func,remove:r.func})}),U=\"undefined\"!=typeof document,q=/*#__PURE__*/function(e){function r(t){var n;return(n=e.call(this,t)||this).helmetData=new N(n.props.context,r.canUseDOM),n}return s(r,e),r.prototype.render=function(){/*#__PURE__*/return t.createElement(R.Provider,{value:this.helmetData.value},this.props.children)},r}(e);q.canUseDOM=U,q.propTypes={context:r.shape({helmet:r.shape()}),children:r.node.isRequired},q.defaultProps={context:{}},q.displayName=\"HelmetProvider\";var Y=function(t,e){var r,n=document.head||document.querySelector(l.HEAD),i=n.querySelectorAll(t+\"[data-rh]\"),o=[].slice.call(i),a=[];return e&&e.length&&e.forEach(function(e){var n=document.createElement(t);for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(\"innerHTML\"===i?n.innerHTML=e.innerHTML:\"cssText\"===i?n.styleSheet?n.styleSheet.cssText=e.cssText:n.appendChild(document.createTextNode(e.cssText)):n.setAttribute(i,void 0===e[i]?\"\":e[i]));n.setAttribute(\"data-rh\",\"true\"),o.some(function(t,e){return r=e,n.isEqualNode(t)})?o.splice(r,1):a.push(n)}),o.forEach(function(t){return t.parentNode.removeChild(t)}),a.forEach(function(t){return n.appendChild(t)}),{oldTags:o,newTags:a}},B=function(t,e){var r=document.getElementsByTagName(t)[0];if(r){for(var n=r.getAttribute(\"data-rh\"),i=n?n.split(\",\"):[],o=[].concat(i),a=Object.keys(e),s=0;s<a.length;s+=1){var c=a[s],u=e[c]||\"\";r.getAttribute(c)!==u&&r.setAttribute(c,u),-1===i.indexOf(c)&&i.push(c);var l=o.indexOf(c);-1!==l&&o.splice(l,1)}for(var p=o.length-1;p>=0;p-=1)r.removeAttribute(o[p]);i.length===o.length?r.removeAttribute(\"data-rh\"):r.getAttribute(\"data-rh\")!==a.join(\",\")&&r.setAttribute(\"data-rh\",a.join(\",\"))}},K=function(t,e){var r=t.baseTag,n=t.htmlAttributes,i=t.linkTags,o=t.metaTags,a=t.noscriptTags,s=t.onChangeClientState,c=t.scriptTags,u=t.styleTags,p=t.title,f=t.titleAttributes;B(l.BODY,t.bodyAttributes),B(l.HTML,n),function(t,e){void 0!==t&&document.title!==t&&(document.title=S(t)),B(l.TITLE,e)}(p,f);var d={baseTag:Y(l.BASE,r),linkTags:Y(l.LINK,i),metaTags:Y(l.META,o),noscriptTags:Y(l.NOSCRIPT,a),scriptTags:Y(l.SCRIPT,c),styleTags:Y(l.STYLE,u)},h={},m={};Object.keys(d).forEach(function(t){var e=d[t],r=e.newTags,n=e.oldTags;r.length&&(h[t]=r),n.length&&(m[t]=d[t].oldTags)}),e&&e(),s(t,h,m)},_=null,z=/*#__PURE__*/function(t){function e(){for(var e,r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];return(e=t.call.apply(t,[this].concat(n))||this).rendered=!1,e}s(e,t);var r=e.prototype;return r.shouldComponentUpdate=function(t){return!o(t,this.props)},r.componentDidUpdate=function(){this.emitChange()},r.componentWillUnmount=function(){this.props.context.helmetInstances.remove(this),this.emitChange()},r.emitChange=function(){var t,e,r=this.props.context,n=r.setHelmet,i=null,o=(t=r.helmetInstances.get().map(function(t){var e=a({},t.props);return delete e.context,e}),{baseTag:A([\"href\"],t),bodyAttributes:v(\"bodyAttributes\",t),defer:T(t,\"defer\"),encode:T(t,\"encodeSpecialCharacters\"),htmlAttributes:v(\"htmlAttributes\",t),linkTags:C(l.LINK,[\"rel\",\"href\"],t),metaTags:C(l.META,[\"name\",\"charset\",\"http-equiv\",\"property\",\"itemprop\"],t),noscriptTags:C(l.NOSCRIPT,[\"innerHTML\"],t),onChangeClientState:b(t),scriptTags:C(l.SCRIPT,[\"src\",\"innerHTML\"],t),styleTags:C(l.STYLE,[\"cssText\"],t),title:g(t),titleAttributes:v(\"titleAttributes\",t),prioritizeSeoTags:O(t,\"prioritizeSeoTags\")});q.canUseDOM?(e=o,_&&cancelAnimationFrame(_),e.defer?_=requestAnimationFrame(function(){K(e,function(){_=null})}):(K(e),_=null)):k&&(i=k(o)),n(i)},r.init=function(){this.rendered||(this.rendered=!0,this.props.context.helmetInstances.add(this),this.emitChange())},r.render=function(){return this.init(),null},e}(e);z.propTypes={context:D.isRequired},z.displayName=\"HelmetDispatcher\";var F=[\"children\"],G=[\"children\"],W=/*#__PURE__*/function(e){function r(){return e.apply(this,arguments)||this}s(r,e);var o=r.prototype;return o.shouldComponentUpdate=function(t){return!n(I(this.props,\"helmetData\"),I(t,\"helmetData\"))},o.mapNestedChildrenToProps=function(t,e){if(!e)return null;switch(t.type){case l.SCRIPT:case l.NOSCRIPT:return{innerHTML:e};case l.STYLE:return{cssText:e};default:throw new Error(\"<\"+t.type+\" /> elements are self-closing and can not contain children. Refer to our API for more information.\")}},o.flattenArrayTypeChildren=function(t){var e,r=t.child,n=t.arrayTypeChildren;return a({},n,((e={})[r.type]=[].concat(n[r.type]||[],[a({},t.newChildProps,this.mapNestedChildrenToProps(r,t.nestedChildren))]),e))},o.mapObjectTypeChildren=function(t){var e,r,n=t.child,i=t.newProps,o=t.newChildProps,s=t.nestedChildren;switch(n.type){case l.TITLE:return a({},i,((e={})[n.type]=s,e.titleAttributes=a({},o),e));case l.BODY:return a({},i,{bodyAttributes:a({},o)});case l.HTML:return a({},i,{htmlAttributes:a({},o)});default:return a({},i,((r={})[n.type]=a({},o),r))}},o.mapArrayTypeChildrenToProps=function(t,e){var r=a({},e);return Object.keys(t).forEach(function(e){var n;r=a({},r,((n={})[e]=t[e],n))}),r},o.warnOnInvalidChildren=function(t,e){return i(h.some(function(e){return t.type===e}),\"function\"==typeof t.type?\"You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.\":\"Only elements types \"+h.join(\", \")+\" are allowed. Helmet does not support rendering <\"+t.type+\"> elements. Refer to our API for more information.\"),i(!e||\"string\"==typeof e||Array.isArray(e)&&!e.some(function(t){return\"string\"!=typeof t}),\"Helmet expects a string as a child of <\"+t.type+\">. Did you forget to wrap your children in braces? ( <\"+t.type+\">{``}</\"+t.type+\"> ) Refer to our API for more information.\"),!0},o.mapChildrenToProps=function(e,r){var n=this,i={};return t.Children.forEach(e,function(t){if(t&&t.props){var e=t.props,o=e.children,a=u(e,F),s=Object.keys(a).reduce(function(t,e){return t[y[e]||e]=a[e],t},{}),c=t.type;switch(\"symbol\"==typeof c?c=c.toString():n.warnOnInvalidChildren(t,o),c){case l.FRAGMENT:r=n.mapChildrenToProps(o,r);break;case l.LINK:case l.META:case l.NOSCRIPT:case l.SCRIPT:case l.STYLE:i=n.flattenArrayTypeChildren({child:t,arrayTypeChildren:i,newChildProps:s,nestedChildren:o});break;default:r=n.mapObjectTypeChildren({child:t,newProps:r,newChildProps:s,nestedChildren:o})}}}),this.mapArrayTypeChildrenToProps(i,r)},o.render=function(){var e=this.props,r=e.children,n=u(e,G),i=a({},n),o=n.helmetData;return r&&(i=this.mapChildrenToProps(r,i)),!o||o instanceof N||(o=new N(o.context,o.instances)),o?/*#__PURE__*/t.createElement(z,a({},i,{context:o.value,helmetData:void 0})):/*#__PURE__*/t.createElement(R.Consumer,null,function(e){/*#__PURE__*/return t.createElement(z,a({},i,{context:e}))})},r}(e);W.propTypes={base:r.object,bodyAttributes:r.object,children:r.oneOfType([r.arrayOf(r.node),r.node]),defaultTitle:r.string,defer:r.bool,encodeSpecialCharacters:r.bool,htmlAttributes:r.object,link:r.arrayOf(r.object),meta:r.arrayOf(r.object),noscript:r.arrayOf(r.object),onChangeClientState:r.func,script:r.arrayOf(r.object),style:r.arrayOf(r.object),title:r.string,titleAttributes:r.object,titleTemplate:r.string,prioritizeSeoTags:r.bool,helmetData:r.object},W.defaultProps={defer:!0,encodeSpecialCharacters:!0,prioritizeSeoTags:!1},W.displayName=\"Helmet\";export{W as Helmet,N as HelmetData,q as HelmetProvider};\n//# sourceMappingURL=index.module.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nvar defaultAttributes = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 24,\n  height: 24,\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  strokeWidth: 2,\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\"\n};\n\nexport { defaultAttributes as default };\n//# sourceMappingURL=defaultAttributes.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes.js';\n\nconst toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase().trim();\nconst createLucideIcon = (iconName, iconNode) => {\n  const Component = forwardRef(\n    ({ color = \"currentColor\", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = \"\", children, ...rest }, ref) => createElement(\n      \"svg\",\n      {\n        ref,\n        ...defaultAttributes,\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n        className: [\"lucide\", `lucide-${toKebabCase(iconName)}`, className].join(\" \"),\n        ...rest\n      },\n      [\n        ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n        ...Array.isArray(children) ? children : [children]\n      ]\n    )\n  );\n  Component.displayName = `${iconName}`;\n  return Component;\n};\n\nexport { createLucideIcon as default, toKebabCase };\n//# sourceMappingURL=createLucideIcon.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Briefcase = createLucideIcon(\"Briefcase\", [\n  [\"rect\", { width: \"20\", height: \"14\", x: \"2\", y: \"7\", rx: \"2\", ry: \"2\", key: \"eto64e\" }],\n  [\"path\", { d: \"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16\", key: \"zwj3tp\" }]\n]);\n\nexport { Briefcase as default };\n//# sourceMappingURL=briefcase.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Code = createLucideIcon(\"Code\", [\n  [\"polyline\", { points: \"16 18 22 12 16 6\", key: \"z7tu5w\" }],\n  [\"polyline\", { points: \"8 6 2 12 8 18\", key: \"1eg1df\" }]\n]);\n\nexport { Code as default };\n//# sourceMappingURL=code.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Home = createLucideIcon(\"Home\", [\n  [\"path\", { d: \"m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\", key: \"y5dka4\" }],\n  [\"polyline\", { points: \"9 22 9 12 15 12 15 22\", key: \"e2us08\" }]\n]);\n\nexport { Home as default };\n//# sourceMappingURL=home.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Mail = createLucideIcon(\"Mail\", [\n  [\"rect\", { width: \"20\", height: \"16\", x: \"2\", y: \"4\", rx: \"2\", key: \"18n3k1\" }],\n  [\"path\", { d: \"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7\", key: \"1ocrg3\" }]\n]);\n\nexport { Mail as default };\n//# sourceMappingURL=mail.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Menu = createLucideIcon(\"Menu\", [\n  [\"line\", { x1: \"4\", x2: \"20\", y1: \"12\", y2: \"12\", key: \"1e0a9i\" }],\n  [\"line\", { x1: \"4\", x2: \"20\", y1: \"6\", y2: \"6\", key: \"1owob3\" }],\n  [\"line\", { x1: \"4\", x2: \"20\", y1: \"18\", y2: \"18\", key: \"yk5zj1\" }]\n]);\n\nexport { Menu as default };\n//# sourceMappingURL=menu.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst User = createLucideIcon(\"User\", [\n  [\"path\", { d: \"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\", key: \"975kel\" }],\n  [\"circle\", { cx: \"12\", cy: \"7\", r: \"4\", key: \"17ys0d\" }]\n]);\n\nexport { User as default };\n//# sourceMappingURL=user.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst X = createLucideIcon(\"X\", [\n  [\"path\", { d: \"M18 6 6 18\", key: \"1bl5f8\" }],\n  [\"path\", { d: \"m6 6 12 12\", key: \"d8bk6v\" }]\n]);\n\nexport { X as default };\n//# sourceMappingURL=x.js.map\n","import { useState, useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { Menu, X, Home, User, Code, Briefcase, Mail } from 'lucide-react'\n\nconst navItems = [\n  { id: 'home', label: 'Home', href: '#home', icon: Home },\n  { id: 'about', label: 'About', href: '#about', icon: User },\n  { id: 'skills', label: 'Skills', href: '#skills', icon: Code },\n  { id: 'experience', label: 'Experience', href: '#experience', icon: Briefcase },\n  { id: 'projects', label: 'Projects', href: '#projects', icon: Code },\n  { id: 'certificates', label: 'Certificates', href: '/certificates', icon: Briefcase },\n  { id: 'contact', label: 'Contact', href: '#contact', icon: Mail },\n]\n\nexport default function Navbar() {\n  const [isScrolled, setIsScrolled] = useState(false)\n  const [isVisible, setIsVisible] = useState(true)\n  const [lastScrollY, setLastScrollY] = useState(0)\n  const [activeSection, setActiveSection] = useState('home')\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)\n  \n  const toggleMobileMenu = () => setIsMobileMenuOpen(!isMobileMenuOpen)\n\n  // Handle scroll effects\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY\n      \n      setIsScrolled(currentScrollY > 50)\n      \n      // Hide navbar when scrolling down, show when scrolling up\n      if (currentScrollY > lastScrollY && currentScrollY > 100) {\n        setIsVisible(false)\n      } else {\n        setIsVisible(true)\n      }\n      \n      setLastScrollY(currentScrollY)\n    }\n\n    window.addEventListener('scroll', handleScroll)\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [lastScrollY])\n\n  // Handle active section detection based on current path\n  useEffect(() => {\n    const path = window.location.pathname\n    const currentItem = navItems.find(item => item.href === path)\n    if (currentItem) {\n      setActiveSection(currentItem.id)\n    }\n  }, [])\n\n  const handleNavClick = (href: string, id: string) => {\n    if (href.startsWith('#')) {\n      // Smooth scroll to section\n      const element = document.getElementById(id)\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth' })\n      }\n    } else {\n      // Navigate to different page\n      window.location.href = href\n    }\n    \n    setActiveSection(id)\n    \n    if (isMobileMenuOpen) {\n      toggleMobileMenu()\n    }\n  }\n\n\n\n  return (\n    <>\n      {/* Desktop & Mobile Navbar */}\n      <motion.nav\n        initial={{ y: -100 }}\n        animate={{ y: isVisible ? 0 : -100 }}\n        transition={{ duration: 0.3 }}\n        className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n          isScrolled \n            ? 'bg-black/90 backdrop-blur-sm border-b border-white/10' \n            : 'bg-black/20'\n        }`}\n      >\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between h-10\">\n            {/* Logo - Left */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-500 rounded flex items-center justify-center\">\n                <span className=\"text-white font-bold text-xs\">AG</span>\n              </div>\n              <h1 className=\"text-white font-medium text-sm\">\n                Abhik <span className=\"text-blue-400\">Ghosh</span>\n              </h1>\n            </div>\n\n            {/* Desktop Navigation - Right */}\n            <div className=\"hidden md:flex items-center space-x-1\">\n              {navItems.map((item) => (\n                <button\n                  key={item.id}\n                  onClick={() => handleNavClick(item.href, item.id)}\n                  className={`px-2 py-1 rounded text-xs font-medium transition-colors ${\n                    activeSection === item.id\n                      ? 'text-blue-400 bg-white/10'\n                      : 'text-white/70 hover:text-white hover:bg-white/5'\n                  }`}\n                >\n                  {item.label}\n                </button>\n              ))}\n            </div>\n\n            {/* Mobile Menu Button - Right */}\n            <button\n              onClick={toggleMobileMenu}\n              className=\"md:hidden p-1 rounded text-white/70 hover:text-white\"\n            >\n              {isMobileMenuOpen ? <X className=\"w-4 h-4\" /> : <Menu className=\"w-4 h-4\" />}\n            </button>\n          </div>\n        </div>\n      </motion.nav>\n\n      {/* Mobile Menu Overlay */}\n      <AnimatePresence>\n        {isMobileMenuOpen && (\n          <>\n            {/* Backdrop */}\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40 md:hidden\"\n              onClick={toggleMobileMenu}\n            />\n\n            {/* Mobile Menu */}\n            <motion.div\n              initial={{ x: '100%' }}\n              animate={{ x: 0 }}\n              exit={{ x: '100%' }}\n              transition={{ type: 'spring', bounce: 0, duration: 0.4 }}\n              className=\"fixed top-0 right-0 h-full w-80 max-w-[80vw] bg-white/10 backdrop-blur-xl border-l border-white/20 z-50 md:hidden\"\n            >\n              <div className=\"flex flex-col h-full\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between p-6 border-b border-white/10\">\n                  <h2 className=\"text-white font-bold text-xl\">\n                    Menu\n                  </h2>\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={toggleMobileMenu}\n                    className=\"p-2 rounded-lg bg-white/10 text-white/80 hover:text-white\"\n                  >\n                    <X className=\"w-5 h-5\" />\n                  </motion.button>\n                </div>\n\n                {/* Navigation Items */}\n                <div className=\"flex-1 py-6\">\n                  {navItems.map((item, index) => {\n                    const ItemIcon = item.icon\n                    return (\n                      <motion.button\n                        key={item.id}\n                        initial={{ opacity: 0, x: 50 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ delay: index * 0.1 }}\n                        whileHover={{ x: 10 }}\n                        onClick={() => handleNavClick(item.href, item.id)}\n                        className={`flex items-center space-x-3 w-full px-6 py-4 text-left transition-all duration-200 ${\n                          activeSection === item.id\n                            ? 'text-blue-400 bg-white/10 border-r-2 border-blue-400'\n                            : 'text-white/80 hover:text-white hover:bg-white/5'\n                        }`}\n                      >\n                        <ItemIcon className=\"w-5 h-5\" />\n                        <span className=\"font-medium\">{item.label}</span>\n                      </motion.button>\n                    )\n                  })}\n                </div>\n\n                {/* Footer */}\n                <div className=\"p-6 border-t border-white/10\">\n                  <p className=\"text-white/60 text-sm text-center\">\n                    © 2025 Abhik Ghosh\n                  </p>\n                </div>\n              </div>\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n\n\n    </>\n  )\n}\n","import { Suspense, lazy } from 'react'\nimport { Routes, Route } from 'react-router-dom'\nimport { Helmet } from 'react-helmet-async'\nimport Navbar from '@/components/layout/Navbar'\n\n// Lazy load pages for better performance\nconst HomePage = lazy(() => import('@/pages/HomePage'))\nconst CertificatesPage = lazy(() => import('@/pages/CertificatesPage'))\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen relative overflow-x-hidden\">\n      <Helmet>\n        <title>Abhik Ghosh | Cloud Architect | AI/ML Expert</title>\n        <meta \n          name=\"description\" \n          content=\"Cloud Architect at Capgemini specializing in DevSecOps, AI/ML, and cloud transformation. Expert in AWS, Azure, GCP, and modern development practices.\" \n        />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"theme-color\" content=\"#6366f1\" />\n        <link rel=\"canonical\" href=\"https://abhik.cloud\" />\n      </Helmet>\n\n      <Navbar />\n      \n      <main>\n        <Suspense fallback={<div className=\"flex items-center justify-center min-h-screen\"><div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500\"></div></div>}>\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/certificates\" element={<CertificatesPage />} />\n          </Routes>\n        </Suspense>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { HelmetProvider } from 'react-helmet-async'\nimport App from './App.tsx'\nimport './index.css'\n\n\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      gcTime: 1000 * 60 * 30, // 30 minutes\n    },\n  },\n})\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <HelmetProvider>\n      <QueryClientProvider client={queryClient}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </QueryClientProvider>\n    </HelmetProvider>\n  </React.StrictMode>,\n)\n"],"file":"assets/index-IigOUnAy.js"}